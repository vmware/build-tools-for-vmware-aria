name: Build Project

on:
  pull_request:
  push:
    branches:
      - "**" # trigger the workflow on any branch push event
    paths:
      - "**" # trigger the workflow on any file change
  workflow_dispatch:

jobs:
  build:
    concurrency:
      group: ${{ github.ref }}

    strategy:
      matrix:
        java: ["17"]
        maven: ["3.8.7"]
        node: ["14.17.1"]
        os: ["ubuntu-latest"]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout vmware/build-tools-for-vmware-aria repository
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: Use Node.js ${{ matrix.node }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}

      - name: Setup Maven Action
        uses: s4u/setup-maven-action@v1.7.0
        with:
          java-version: ${{ matrix.java }}
          java-distribution: "corretto"
          maven-version: ${{ matrix.maven }}

      - name: Print versions
        run: |
          npm --version
          node --version
          mvn --version

      - name: Get IAC version
        run: echo "IAC_VERSION=$(mvn help:evaluate -Dexpression=revision -q -DforceStdout)" >> $GITHUB_ENV

      - name: Replace variables in settings.xml
        run: |
          sed -i "s/{{ IAC_VERSION }}/${{ env.IAC_VERSION }}/g" .m2/settings.xml
          sed -i "s/{{ OSSRH_USERNAME }}/${{ secrets.OSSRH_USERNAME }}/g" .m2/settings.xml
          sed -i "s/{{ OSSRH_PASSWORD }}/${{ secrets.OSSRH_PASSWORD }}/g" .m2/settings.xml

      - name: Import GPG Key
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: Set default env GPG_PASSPHRASE
        run: echo "GPG_PASSPHRASE=''" >> $GITHUB_ENV

      - name: Set env GPG_PASSPHRASE if main
        if: ${{ github.ref == 'refs/heads/main' }}
        run: echo "GPG_PASSPHRASE=${{ secrets.GPG_PASSPHRASE }}" >> $GITHUB_ENV

      - name: Set MVN_BUILD_COMMAND
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            MVN_BUILD_COMMAND="install deploy"
          else
            MVN_BUILD_COMMAND="install"
          fi
          echo "MVN_BUILD_COMMAND is $MVN_BUILD_COMMAND"
          echo "MVN_BUILD_COMMAND=$MVN_BUILD_COMMAND" >> $GITHUB_ENV

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build 'keystore-example'
        run: mvn clean ${{ env.MVN_BUILD_COMMAND }} -f common/keystore-example/pom.xml --batch-mode -Dgpg.passphrase=${{ env.GPG_PASSPHRASE }} -s $PWD/.m2/settings.xml 
      - name: Build 'npmlib'
        run: mvn clean ${{ env.MVN_BUILD_COMMAND }} -f maven/npmlib/pom.xml --batch-mode -Dgpg.passphrase=${{ env.GPG_PASSPHRASE }} -s $PWD/.m2/settings.xml
      - name: Build 'iac'
        run: mvn clean ${{ env.MVN_BUILD_COMMAND }} -f pom.xml --batch-mode -Dgpg.passphrase=${{ env.GPG_PASSPHRASE }} -s $PWD/.m2/settings.xml
      - name: Build 'base-package'
        run: mvn clean ${{ env.MVN_BUILD_COMMAND }} -f maven/base-package/pom.xml --batch-mode -Dgpg.passphrase=${{ env.GPG_PASSPHRASE }} -s $PWD/.m2/settings.xml
      - name: Build 'packages'
        run: mvn clean ${{ env.MVN_BUILD_COMMAND }} -f packages/pom.xml --batch-mode -Dgpg.passphrase=${{ env.GPG_PASSPHRASE }} -s $PWD/.m2/settings.xml
      - name: Build 'typescript-project-all'
        run: mvn clean ${{ env.MVN_BUILD_COMMAND }} -f maven/typescript-project-all/pom.xml --batch-mode -Dgpg.passphrase=${{ env.GPG_PASSPHRASE }} -s $PWD/.m2/settings.xml
      - name: Build 'repository'
        run: mvn clean package -f maven/repository/pom.xml --batch-mode -Dgpg.passphrase=${{ env.GPG_PASSPHRASE }} -s $PWD/.m2/settings.xml

      - name: Checkout vmware-samples/build-tools-for-vmware-aria-samples repository
        uses: actions/checkout@v3
        with:
          repository: vmware-samples/build-tools-for-vmware-aria-samples
          ref: main
          path: build-tools-for-vmware-aria-samples
      - name: Build vmware-samples/build-tools-for-vmware-aria-samples project repository
        run: |
          pushd build-tools-for-vmware-aria-samples/
          ./switch_parent_version.sh ${{ env.IAC_VERSION }}
          mvn clean package install -Pbundle-with-installer --batch-mode -s ../.m2/settings.xml
          popd
          rm -rf build-tools-for-vmware-aria-samples/

      - name: Set artifact file name
        if: ${{ !contains(env.IAC_VERSION, '-SNAPSHOT') }}
        run: echo "ARTIFACT_FILE_NAME=build-tools-for-vmware-aria-${{ env.IAC_VERSION }}-${{ github.run_number }}" >> $GITHUB_ENV

      - name: Package all artifacts
        if: ${{ !contains(env.IAC_VERSION, '-SNAPSHOT') }}
        run: |
          cp maven/repository/target/iac-maven-repository.zip .
          tar -zcvf "${{ env.ARTIFACT_FILE_NAME }}.zip" iac-maven-repository.zip docs/ "LICENSE.txt" CHANGELOG.md

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        if: ${{ !contains(env.IAC_VERSION, '-SNAPSHOT') }}
        with:
          name: ${{ env.ARTIFACT_FILE_NAME }}
          path: ${{ env.ARTIFACT_FILE_NAME }}.zip

  results:
    if: ${{ always() }}
    runs-on: ubuntu-latest
    name: Build Results
    needs: [build]
    steps:
      - run: exit 1
        if: >-
          ${{
               contains(needs.*.result, 'failure')
            || contains(needs.*.result, 'cancelled')
          }}
