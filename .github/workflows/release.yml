name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Enter the version number [x.y.z]:"
        required: true

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      actions: write
      contents: write
    steps:

      - name: Validate actor permissions
        run: |
          URL="https://api.github.com/organizations/vmware/team/build-tools-for-vmware-aria-maintainers/memberships/${GITHUB_ACTOR}"
          OUTPUT=$(curl -L \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GH_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            $URL )
          echo $GITHUB_ACTOR
          echo $OUTPUT

          if ! [[ $(echo $OUTPUT | jq -r '.state') == "active" ]]; then
            echo "You are not an active user of 'build-tools-for-vmware-aria-maintainers' team!"
            exit 1
          fi
          if ! [[ $(echo $OUTPUT | jq -r '.role') == "maintainer" ]]; then
            echo "You are not a maintainer user of 'build-tools-for-vmware-aria-maintainers' team!"
            exit 1
          fi

          exit 1
          
      - name: Validate version input
        run: |
          if ! [[ "${{ inputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid version number: ${{ inputs.version }}"
            exit 2
          fi

      - name: Install xmllint
        run: sudo apt-get install libxml2-utils

      - name: Setup Maven Action
        uses: s4u/setup-maven-action@4f7fb9d9675e899ca81c6161dadbba0189a4ebb1 #v1.18.0
        with:
          java-version: 17
          java-distribution: "temurin"
          maven-version: 3.9.2

      - name: Set ENV variables
        run: |
          echo "TMP_FOLDER=tmp_folder" >> $GITHUB_ENV

      - name: Checkout
        run: |
          git config --global user.email "vcf-ps-coe.ci-admin@broadcom.com"
          git config --global user.name "svc-wwcoe-ci-admin"
          git clone --branch main https://svc-wwcoe-ci-admin:${{ secrets.GH_TOKEN }}@github.com/vmware/build-tools-for-vmware-aria.git ${{ env.TMP_FOLDER }}

      - name: Install necessary components
        run: |
          cd ${{ env.TMP_FOLDER }}
          mvn clean install -f common/artifact-manager/pom.xml -DskipTests
          mvn clean install -f maven/plugins/pom.xml

      - name: Generate documentation
        run: |
          cd ${{ env.TMP_FOLDER }}
          echo "Generating Documentation..."
          DOC_VERSION="v${{ inputs.version }}"
          DOC_DATE_VERSION="$DOC_VERSION - $(date +"%d %b %Y")"
          VERSIONS_FOLDER="./docs/versions"
          LATEST_VERSION_FOLDER="$VERSIONS_FOLDER/latest"
          LATEST_VERSION_RELEASE_MD="$LATEST_VERSION_FOLDER/Release.md"
          NEW_VERSION_FOLDER="$VERSIONS_FOLDER/$DOC_VERSION"
          NEW_VERSION_RELEASE_MD="$NEW_VERSION_FOLDER/Release.md"
          NEW_VERSION_README_MD="$NEW_VERSION_FOLDER/README.md"
          VERSION_PLACEHOLDER_TEXT="VERSION_PLACEHOLDER DO NOT DELETE"

          #	Create a new version folder
          [ -d "$NEW_VERSION_FOLDER" ] && rm -rf $NEW_VERSION_FOLDER
          mkdir $NEW_VERSION_FOLDER

          #	Copy latest to the new release folder
          cp -rf $LATEST_VERSION_FOLDER/* $NEW_VERSION_FOLDER

          #	Insert the latest version in Release.md and README.md for the new release
          sed -i "/$VERSION_PLACEHOLDER_TEXT/c\\# $DOC_VERSION" $NEW_VERSION_RELEASE_MD

          sed -i "/$VERSION_PLACEHOLDER_TEXT/c\\# $DOC_VERSION" $NEW_VERSION_README_MD

          #	Remove comments from the Release file ( potential future improvements remove all comments recursively in all files )
          sed -i '/^\[\/\/\]:\s#/d' $NEW_VERSION_RELEASE_MD

          #	Delete latest Release.md and replace it with a blank one
          rm -rf $LATEST_VERSION_RELEASE_MD
          cp -rf ./docs/Templates/Release.md $LATEST_VERSION_RELEASE_MD

          echo "Done Generating Documentation." 

      - name: Generate plugin arguments
        run: |
          cd ${{ env.TMP_FOLDER }}
          for POM_PATH in $(find maven/plugins -mindepth 2 -maxdepth 2 -name pom.xml -type f -not -path "maven/plugins/common/*"); do # Not recommended, will break on whitespace
            echo "Processing $POM_PATH..."
            GROUP_ID=$(xmllint --xpath '/*[local-name()="project"]/*[local-name()="parent"]/*[local-name()="groupId"]/text()' $POM_PATH) 
            echo "Group ID: $GROUP_ID"

            ARTIFACT_ID=$(xmllint --xpath '/*[local-name()="project"]/*[local-name()="artifactId"]/text()' $POM_PATH) 
            echo "Artifact ID: $ARTIFACT_ID"

            PLUGIN_VERSION=$(xmllint --xpath '/*[local-name()="project"]/*[local-name()="parent"]/*[local-name()="version"]/text()' $POM_PATH)
            echo "Version: $PLUGIN_VERSION"

            PLUGIN_FOLDER=$(dirname $POM_PATH)
            PLUGIN_FOLDER="${PLUGIN_FOLDER##*/}"
            echo "Plugin Folder: $PLUGIN_FOLDER"

            mvn help:describe -D"groupId=$GROUP_ID" -D"artifactId=$ARTIFACT_ID" -D"version=$PLUGIN_VERSION" -Ddetail --batch-mode -f $POM_PATH -D"output=../../../docs/versions/latest/General/Cheatsheets/$PLUGIN_FOLDER-plugin-arguments.md"
          done

      - name: Print git configs
        run: |
          cd ${{ env.TMP_FOLDER }}
          git config --list

      - name: Release v${{ inputs.version }}
        run: |
          cd ${{ env.TMP_FOLDER }}
          mvn versions:set-property -Dproperty=revision -DnewVersion=${{ inputs.version }} -DgenerateBackupPoms=false --non-recursive
          mvn initialize -f vro-types
          mvn initialize -f typescript

          git add .
          git commit -m "(release) v${{ inputs.version }}"
          git tag v${{ inputs.version }}
          git push --tags
          git push   

      - name: Prepare next development iteration
        run: |
          cd ${{ env.TMP_FOLDER }}
          # Increment the build version by 1 and add SNAPSHOT
          SNAPSHOT_VERSION=$(echo ${{ inputs.version }} | awk -F '.' '{print $1"."$2"."$3+1"-SNAPSHOT"}')

          mvn versions:set-property -Dproperty=revision -DnewVersion=$SNAPSHOT_VERSION -DgenerateBackupPoms=false --non-recursive
          mvn initialize -f vro-types
          mvn initialize -f typescript

          git add .
          git commit -m "(release) start development iteration v$SNAPSHOT_VERSION"
          git push
