Syntax: npmconv PACKAGE [OPTIONS]

PACKAGE                                The name of the NPM package in form <name>[@<version>] to fetch its source code and generate a vRO project for. Only TypeScript code is supported currently.

Options:
  -h, --help                           Print this message and exits.
  -s, --srcInclude                     Glob patterns for selecting source files from cloned package to end up in src/ folder of output project. 
                                          This is realative to the NPM package folder and not CWD. Acceptable formats are "<glob_pattern>" and "<glob_pattern>:<dest_dir>".
                                          * glob_pattern is for example: src/**/* referring to all files in src directory
                                          * dest_dir is the relative path to desttination directory to place the files under, for example: passing "model" will place the files in "src/model". 
                                            If not provided will assume same base as in glob_pattern
  -o, --outDir                         Under which directory to create result vRO package folder.
  -g, --groupId                        The groupId to set for the final vRO package. Blank if fallback to conventionGroupId.
  -a, --artifactId                     The artifactId to set for the final vRO package. Blank to use the npm package name.
  -v, --version                        The artifactId to set for the final vRO package. Leave blank to inherit from npm package.
  -c, --conventionGroupId              The convention group id to fall back to if a groupId is not explicitly provided/inferred otherwise. Used as default for both artifaactDepsMap and groupId fields.
  -t, --tsconfig                       tsconfig template for merging, performed on top of the artifact generated tsconfig.json by specifying which properties to explicitly set, retain (@), exclude (-) from both and anything else not specified is copied over. The default template is read from ./tsconfig.merge.json
  -d, --artifactDepsMap                Ð¢he maping of npm deps and vro plugin representation. Format is: npmPackageName[@npmPacakgeVersion]/[mvnGroupId:]mvnArtifactId[:mvnVersion[:mvnType]]
                                          * if no npmPackageVersion - the one currently in used in package.json will be assummed
                                          * if no mvnGroupId - the conventionGroupId input will be assummed
                                          * if no mvnVersion - the derived npm version will be used
                                          * if no mvnType - package is assumed
  --skipUnmappedDeps                   When set to 'true' unmapped npm dependencies will not be resolved and their imports will not be rewritten.
  --auxInclude                         Glob patterns for selecting files from CWD to end up in same location under destination output project. Format is "<glob_pattern>:<dest_dir>"
                                          * glob_pattern is for example: sample/**/* referring to all files in sample directory
                                          * dest_dir is the relative path to desttination directory to place the files under. For example: src. If not provided will assume same base as in glob_pattern
  --auxMvnDeps                         Explicit mvn dependencies to add to pom.xml. Format is: [mvnGroupId:]mvnArtifactId[:mvnVersion[:mvnType]]
                                          * if no npmPackageVersion - the one currently in used in package.json will be assummed
                                          * if no mvnGroupId - the conventionGroupId input will be assummed
                                          * if no mvnVersion - the derived npm version will be used
                                          * if no mvnType - package is assumed
  --compileMvnDeps                     Explicit mvn dependencies to add to pom.xml with compile scope. Same format as auxMvnDeps.
  --toolchainVersion                   Specify the version of the vRO toolchain to convert to. Defaults to latest RELEASE version.
  --vv, --verbose                      Switch on debug logging.

Example usage:
** Build reflect-metadata with shim type-def found in current working dir:
   npmconv reflect-metadata -c com.vmware.pscoe.npm -o target/output -s "Reflect.ts" --auxInclude "sample/compile-shims.d.ts:src" --vv
   npmconv inversify -c com.vmware.pscoe.npm -o target/output --compileMvnDeps :reflect-metadata:0.1.13 --auxMvnDeps :reflect-metadata:0.1.13:package --auxInclude "sample/compile-shims.d.ts:src"

