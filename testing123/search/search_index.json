{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Build Tools for VMware Aria","text":"<p>This repository contains the source code for the Build Tools for VMware Aria, formally knows as vRealize Build Tools. Build Tools for VMware Aria provides development and release management tools for implementing automation solutions based on the VMware Aria Suite (VMware Aria Automation, VMware Aria Automation Orchestrator, VMware Aria Operations, VMware Aria Automation Pipelines, Aria Operations for Logs) and VMware Cloud Director. The solution enables Virtual Infrastructure Administrators and Automation Developers to use standard DevOps practices for managing and deploying content.</p>"},{"location":"#structure","title":"Structure","text":"<pre><code>Home - landing page [@NV]\n    something with color/fancy\n    List of all supported content by Product\n</code></pre>"},{"location":"CHANGELOG/","title":"Changelog","text":""},{"location":"CHANGELOG/#v2291-15-feb-2023","title":"v2.29.1 - 15 Feb 2023","text":""},{"location":"CHANGELOG/#fixes","title":"Fixes","text":"<ul> <li>[package-installer] IAC-713 / Installer doesn't ask for all required information about importing vR\u0410</li> <li>[polyglotpkg] IAC-712 / Enabled unit testing phase for npm lib projects, fix abx and polyglot pkg to be backward compatible</li> <li>[polyglotpkg] IAC-712 / Updated project dependencies to not trigger build errors when combined with typescript-project-all projects.</li> </ul>"},{"location":"CHANGELOG/#v2290-27-jan-2023","title":"v2.29.0 - 27 Jan 2023","text":""},{"location":"CHANGELOG/#fixes_1","title":"Fixes","text":"<ul> <li>[artifact-manager] IAC-708 / Updated commons-text version to 1.10.0</li> <li>[maven-plugins-vrli] IAC-711 / Pulling LogInsight content packs fails</li> </ul>"},{"location":"CHANGELOG/#v2280-23-jan-2023","title":"v2.28.0 - 23 Jan 2023","text":""},{"location":"CHANGELOG/#enhancements","title":"Enhancements","text":"<ul> <li>[artifact-manager] IAC-671 / vRBT to support sending UTF-8 content in regards to vRA-NG projects.</li> <li>[artifact-manager] IAC-671 / vRA-NG content (Content Sources, Custom Forms, Catalog Items .. ) now support \".\" in their names.</li> <li>[polyglot] IAC-626 / The Polyglot archetype now works with multiple packages instead of just one.</li> </ul>"},{"location":"CHANGELOG/#fixes_2","title":"Fixes","text":"<ul> <li>[artifact-manager] IAC-553 / Fixed importing of property groups with different project scope.</li> <li>[vrotest] IAC-696 / Fixed Error massage while executing vro unit tests</li> <li>[release] IAC-682 / Removed unused bamboospec.java file, enable batch mode during release, update pom.xml structure to match the filesystem relative paths, update project dependencies.</li> <li>[vRA-NG] IAC-692 / vra-ng:pull throws NullPointerException for missing properties in the vra/content.yaml</li> <li>[vrotest] IAC-705 / Add implementation for System.sleep and System.waitUntil</li> <li>[MVN] IAC-686 / Add implementation for polyglot packages to be published in JFrog when deploy command is executed.</li> </ul>"},{"location":"CHANGELOG/#v2270-15-dec-2022","title":"v2.27.0 - 15 Dec 2022","text":""},{"location":"CHANGELOG/#enhancements_1","title":"Enhancements","text":"<ul> <li>[build-tools-for-aria] IAC-666 / Update documentation to use approved project name <code>Build Tools for VMware Aria</code></li> <li>[build-tools-for-aria] IAC-622 / Added the ability to skip install-node-deps and cleaning node_modules during mvn clean lifecycle step by passing the flag skipInstallNodeDeps. If node_modules folder doesn't exist, then this flag is ineffective. This is done, to make sure that build shouldn't fail, because of this flag in any case.</li> <li>[ts-autogen] IAC-618 Removed the ts-autogen archtype, as this is causing the issue to make the toolchain opensource/public</li> <li>[documentation] IAC-675/ Added documentation for unit testing</li> <li>[artifact-manager] IAC-644 / Add support for the following ABX properties: memoryLimitMb, timeoutSec, provider(Faas provider), shared(Share with all projects in this organization), inputSecrets(Secret), inputConstants(Action constant).</li> </ul>"},{"location":"CHANGELOG/#fixes_3","title":"Fixes","text":"<ul> <li>[installer] IAC-437 / Fixed Installer Skips Steps Under Mac OS</li> <li>[installer] IAC-584 / Fixed Interactive Installer Doesn't Ask if vRO is embedded</li> <li>[installer] IAC-669 / NPE in case user provides non-existing project name during installation</li> <li>[artifact-manager] IAC-663 / vRA NG fails to release existing blueprint version</li> <li>[vRA] IAC-633 / Fixed vRA authentication to respect refresh token in configuration</li> </ul>"},{"location":"CHANGELOG/#v2264-13-oct-2022","title":"v2.26.4 - 13 Oct 2022","text":""},{"location":"CHANGELOG/#fixes_4","title":"Fixes","text":"<ul> <li>[artifact-manager, store] IAC-637 / Fixed VraNgCustomResourceStore when updating Custom Resource after initial deletion failed</li> <li>[vrotsc] IAC-606 / Constants are being exported correctly now</li> <li>[vro-types] Added distinguishedName property to the AD_Computer and AD_OrganizationalUnit interfaces</li> <li>[artifact-manager] IAC-639 / Blueprints cannot be imported when they have \".\" in thier names</li> <li>[custom-resources] Fix Custom Resource Second Day action name validation</li> <li>[artifact-manager] IAC-638 / Property groups are now correctly updated</li> <li>[artifact-manager] CustomResources now respect if orgName is set instead of orgId</li> </ul>"},{"location":"CHANGELOG/#enhancements_2","title":"Enhancements","text":"<ul> <li>[artifact-manager,package-installer] IAC-564 / Add prompt for vrang_proxy when package-installer is run without environment.properties file</li> </ul>"},{"location":"CHANGELOG/#v2263-24-aug-2022","title":"v2.26.3 - 24 Aug 2022","text":""},{"location":"CHANGELOG/#fixes_5","title":"Fixes","text":"<ul> <li>[artifact-manager] IAC-623 / Fixed pushing of catalog items that had custom forms defined.</li> <li>[vRA-NG] IAC-625 / Pulling blueprints with multiple versions on vRA 8.9 results in error.</li> </ul>"},{"location":"CHANGELOG/#v2262-16-aug-2022","title":"v2.26.2 - 16 Aug 2022","text":""},{"location":"CHANGELOG/#fixes_6","title":"Fixes","text":"<ul> <li>[vRA-NG] IAC-620 vRA-NG push will now release the blueprint if no versions.json is present</li> <li>[documentation] IAC-621/Fixed the Release.md template so it's more concise when sed is used to remove the Comments.</li> <li>[artifact-manager] IAC-621/ Fixed vRA Custom Resources With Day-2 actions importing in vRA 8.8.2</li> </ul>"},{"location":"CHANGELOG/#v2261-29-jul-2022","title":"v2.26.1 - 29 Jul 2022","text":""},{"location":"CHANGELOG/#fixes_7","title":"Fixes","text":"<ul> <li>[polyglot] IAC-619 Pushing polyglot projects fails with 'Port is not a number'</li> </ul>"},{"location":"CHANGELOG/#doc-updates","title":"Doc updates","text":"<ul> <li>[package-installer] IAC-428 / Added descriptions for some package installer and maven settings.xml configuration options</li> </ul>"},{"location":"CHANGELOG/#v2260-19-jul-2022","title":"v2.26.0 - 19 Jul 2022","text":""},{"location":"CHANGELOG/#enhancements_3","title":"Enhancements","text":"<ul> <li>[artifact-manager] IAC-613 / Pulling Non Present Content needs to error</li> <li>[artifact-manager] IAC-615 / Pushing content to Server to filter only content in content.yaml</li> </ul>"},{"location":"CHANGELOG/#v2253-15-jul-2022","title":"v2.25.3 - 15 Jul 2022","text":""},{"location":"CHANGELOG/#fixes_8","title":"Fixes","text":"<ul> <li>[installer] IAC-617 / Introduce installer exit code <code>0</code> in case of successful import.</li> <li>[vro-types] IAC-607 / SQL Plugin Definition Inconsistencies</li> </ul>"},{"location":"CHANGELOG/#v2252-11-jul-2022","title":"v2.25.2 - 11 Jul 2022","text":""},{"location":"CHANGELOG/#enhancements_4","title":"Enhancements","text":"<ul> <li>[artifact-manager] IAC-595 / Improved error message when action name is too long</li> </ul>"},{"location":"CHANGELOG/#fixes_9","title":"Fixes","text":"<ul> <li>[polyglot] IAC-611 / Executing mvn vrealize:push fails for polyglot projects</li> <li>[polyglotpkg] IAC-602 / Updated old PowerShell 5 executable to PowerShell 6 and above</li> <li>[vrotest] IAC-610 / Code coverage thresholds are now set correctly</li> <li>[vrotest] IAC-556 / Tests when dependency has a policy template or other unknown types of elements now work</li> <li>[vropkg] IAC-539 / Removed Certificates from vropkg tests</li> <li>[vropkg] IAC-609 / Fixed EOL for Windows OS certificate signature</li> <li>[vrotest/vro-scripting-api] IAC-598 / Properties.get now returns null instead of undefined in case where the property does not exists ( only in tests, behavior is now the same as the actual Properties object )</li> <li>[vrotest/vro-scripting-api] IAC-608 / ConfigurationElement.getAttributeWithKey now returns null instead of undefined in case where the property does not exists ( only in tests, behavior is now the same as the actual ConfigurationElement object )</li> <li>[vRA-NG] IAC-587 / Added the diskType to storage profile json files to distinguish First Class Disks and removed diskMode from json when disk is FCD, so it can be pushed via vRBT</li> <li>[typescript] IAC-537 / Bumped nodejs version from 12 to 16 when building</li> <li>[installer] IAC-601 / Fixed static version inside dependencies of package installer component</li> </ul>"},{"location":"CHANGELOG/#v2251-14-jun-2022","title":"v2.25.1 - 14 Jun 2022","text":""},{"location":"CHANGELOG/#fixes_10","title":"Fixes","text":"<ul> <li>IAC-592 VROES fails to import actions under src</li> </ul>"},{"location":"CHANGELOG/#enhancements_5","title":"Enhancements","text":"<ul> <li>[vropkg] @param now supports parameter with properties</li> <li>IAC-464 added startup guide markdown in the main folder</li> </ul>"},{"location":"CHANGELOG/#v2250-01-jun-2022","title":"v2.25.0 - 01 Jun 2022","text":""},{"location":"CHANGELOG/#enhancements_6","title":"Enhancements","text":"<ul> <li>[vRA-NG] IAC-567 / Added the capability to not use versions.json for blueprints via a maven property vrang.bp.ignore.versions</li> <li>[vRLI] IAC-588 / Added support for VRLI 8.8 content packs.</li> <li>[package-installer] IAC-430 / Enable different types of input parameters for installation workflow (Array/string, number, boolean)</li> <li>[polyglotpkg] IAC-582 / Bundle dependency modules for PowerShell Polyglot projects</li> </ul>"},{"location":"CHANGELOG/#fixes_11","title":"Fixes","text":"<ul> <li>[vRA-NG] IAC-561, IAC-498 / When releasing a new version of an existing blueprint that has been released and imported it doesn't fail, rather increments the version.</li> </ul>"},{"location":"CHANGELOG/#v2240-20-may-2022","title":"v2.24.0 - 20 May 2022","text":""},{"location":"CHANGELOG/#enhancements_7","title":"Enhancements","text":"<ul> <li>[vRA-NG] IAC-552 / Updated storage format for property groups</li> <li>[Code Stream] IAC-540 / added new content (git,docker,gerrit). Code imporvement, storage imporvement (yaml in yaml formatting) and unit tests</li> <li>[Documentation] IAC-464 / added new startup guide in a markdown file in the main folder</li> </ul>"},{"location":"CHANGELOG/#v2230-04-apr-2022","title":"v2.23.0 - 04 Apr 2022","text":""},{"location":"CHANGELOG/#added","title":"Added","text":"<ul> <li>[vRO] IAC-536 / Composite type values</li> <li>[Installer] IAC-572 / Removed SSL v 1.3 support from the supported SSL algorithms due to JDK bug: JDK-8221253</li> <li>[artifact-manager, vrotsc, installer] IAC-145 / Enabled selection of custom files to transpile based on a git branch.</li> </ul>"},{"location":"CHANGELOG/#fixes_12","title":"Fixes","text":"<ul> <li>[artifact-manager] IAC-534 / Fixed Unable to use refresh token for vRO authentication without username/password.</li> <li>[artifact-manager] IAC-488 / Fixed NullPointerException when the name of the storage profile is not defined.</li> <li>[artifact-manager] IAC-488 / Fixed NullPointerException by empty json files from vra during pull process.</li> <li>[MVN] IAC-566 / Allow property serverId to replace username password for all project types (previously only vra and vro)</li> </ul>"},{"location":"CHANGELOG/#v2222-28-mar-2022","title":"v2.22.2 - 28 Mar 2022","text":""},{"location":"CHANGELOG/#fixes_13","title":"Fixes","text":"<ul> <li>[artifact-manager] IAC-521 / Fixed NullPointerException when the property \"formFormat\" don't exists in the custom form.</li> <li>[vRA-NG] IAC-533 / Fixed disappearing of custom resource, when ID is provided, during the import in multi-tenant environment. Re-enabled the surefire plugin.</li> </ul>"},{"location":"CHANGELOG/#v2221-07-mar-2022","title":"v2.22.1 - 07 Mar 2022","text":""},{"location":"CHANGELOG/#fixes_14","title":"Fixes","text":"<ul> <li>[vrotsc] IAC-547 / Fixed export with alias from ES6 spec e.g. export * as foo from ...</li> </ul>"},{"location":"CHANGELOG/#v2220-07-mar-2022","title":"v2.22.0 - 07 Mar 2022","text":""},{"location":"CHANGELOG/#fixes_15","title":"Fixes","text":"<ul> <li>[vro-types] IAC-546 / Change interface to class, port from vro-type-defs</li> </ul>"},{"location":"CHANGELOG/#added_1","title":"Added","text":"<ul> <li>[VRO] IAC-545 / Type definitions for MQTT vRO plugin</li> </ul>"},{"location":"CHANGELOG/#v2210-02-mar-2022","title":"v2.21.0 - 02 Mar 2022","text":""},{"location":"CHANGELOG/#enhancements_8","title":"Enhancements","text":"<ul> <li>[vRA-NG] IAC-532 / Enhance Custom Resource actions imports</li> <li>[vrotsc] IAC-530 / Generates JavaScript Source Maps from vRO TypeScript compiler</li> <li>[VRO] IAC-493 | IAC-543 / NodeJS-based test framework for vRO</li> <li>[VRO] IAC-328 / Remove vRO hint plugin from vRBT</li> <li>[cloud-client] IAC-329 / Remove Cloud Client from vRBT</li> </ul>"},{"location":"CHANGELOG/#fixes_16","title":"Fixes","text":"<ul> <li>[Code Stream] IAC-525 / Import pipeline in released state</li> <li>[polyglotpkg] IAC-529 / Fixed an issue that required polyglot-cache to be present when building Node.js ABX actions</li> <li>[VRO] IAC-487 / Installer removing imported files</li> </ul>"},{"location":"CHANGELOG/#v2200-02-feb-2022","title":"v2.20.0 - 02 Feb 2022","text":""},{"location":"CHANGELOG/#enhancements_9","title":"Enhancements","text":"<ul> <li>[vRA-NG] IAC-512 / Enable extraction of multiple ABX actions and importing them with package-installer</li> <li>[vRA] IAC-524 / Improved CR importing mechanism, for push among different vRA instances</li> </ul>"},{"location":"CHANGELOG/#fixes_17","title":"Fixes","text":"<ul> <li>[vRA-NG] IAC-513 / Fixed infinite loop when fetching projects</li> </ul>"},{"location":"CHANGELOG/#v2190-21-jan-2022","title":"v2.19.0 - 21 Jan 2022","text":""},{"location":"CHANGELOG/#fixes_18","title":"Fixes","text":"<ul> <li>[vrotsc] IAC-510 / vrotsc issue when packaging native content</li> </ul>"},{"location":"CHANGELOG/#v2182-12-jan-2022","title":"v2.18.2 - 12 Jan 2022","text":""},{"location":"CHANGELOG/#enhancements_10","title":"Enhancements","text":"<ul> <li>[VRA] IAC-511 / Made extracted custom forms human readable</li> <li>[Code Stream] IAC-509 / fix push of pipelines and custom integrations + logging   &amp; [vRA-NG] IAC-508 Improved documentation</li> <li>[MVN] IAC-507 Updated log4j version to 2.17.1</li> </ul>"},{"location":"CHANGELOG/#v2181-17-dec-2021","title":"v2.18.1 - 17 Dec 2021","text":""},{"location":"CHANGELOG/#fixes_19","title":"Fixes","text":"<ul> <li>[vRA-NG] IAC-505 / primitive call for projects now returns all entires even if more than 500</li> </ul>"},{"location":"CHANGELOG/#v2180-17-dec-2021","title":"v2.18.0 - 17 Dec 2021","text":""},{"location":"CHANGELOG/#v2172-06-dec-2021","title":"v2.17.2 - 06 Dec 2021","text":""},{"location":"CHANGELOG/#added_2","title":"Added","text":"<ul> <li>[Code Stream] IAC-236 New project type</li> </ul>"},{"location":"CHANGELOG/#v2171-06-dec-2021","title":"v2.17.1 - 06 Dec 2021","text":""},{"location":"CHANGELOG/#added_3","title":"Added","text":"<ul> <li>[vra-NG] IAC-500 / Added some extra documentation and examples in the archetype</li> <li>[vra-NG] IAC-499 / iac-for-vrealize IAC-499   vro.refresh.token not propagated in maven plugin</li> </ul>"},{"location":"CHANGELOG/#v2170-17-nov-2021","title":"v2.17.0 - 17 Nov 2021","text":""},{"location":"CHANGELOG/#enhancements_11","title":"Enhancements","text":"<ul> <li>[polyglotpkg] IAC-491 / Support building ABX actions with TypeScript project references</li> </ul>"},{"location":"CHANGELOG/#v2162-12-nov-2021","title":"v2.16.2 - 12 Nov 2021","text":""},{"location":"CHANGELOG/#fixes_20","title":"Fixes","text":"<ul> <li>[vRA-NG] IAC-483 / Exporting subscriptions only takes first 20 - now fetching all available</li> <li>[vRA-NG] IAC-484 / Cannot import flavor and image mappings if there are none in the profiles</li> <li>[vRA-NG] IAC-482 / SVG icons are no longer uploaded/downloaded</li> </ul>"},{"location":"CHANGELOG/#known-issues","title":"Known Issues","text":"<ul> <li>[vRA-NG] SVG icons cannot be uploaded since vRA does not recognize it's own format when submitted back</li> </ul>"},{"location":"CHANGELOG/#v2161-09-nov-2021","title":"v2.16.1 - 09 Nov 2021","text":""},{"location":"CHANGELOG/#fixes_21","title":"Fixes","text":"<ul> <li>[vRA-NG] PropertyGroups project ids are now patched before creating/updating</li> <li>[vRA-NG] Fixed missing catalog items in content sources for new blueprints</li> <li>[vRA-NG] Blueprints import and export - extended details, versioning and release status support</li> <li>[vRA-NG] Importing a flavor mapping, when flavor mapping does not exist</li> <li>[vRA-NG] Importing an image mapping, when image mapping does not exist</li> <li>[vRA-NG] Catalog Item ids are now fetched before importing</li> </ul>"},{"location":"CHANGELOG/#enhancements_12","title":"Enhancements","text":"<ul> <li>[vRA-NG] Improved logging on importing custom resources with active attachments</li> </ul>"},{"location":"CHANGELOG/#v2160-02-nov-2021","title":"v2.16.0 - 02 Nov 2021","text":""},{"location":"CHANGELOG/#introduces","title":"Introduces","text":"<ul> <li>[vRA-NG] Property groups support as vRA package contents</li> </ul>"},{"location":"CHANGELOG/#fixes_22","title":"Fixes","text":"<ul> <li>[vRA-NG] Catalog item icon extension fix</li> <li>[vRA-NG] Removed custom forms logic from blueprints storage logic</li> <li>[vRA-NG] NullPointerException on importing flavour mappings - enhanced logging</li> </ul>"},{"location":"CHANGELOG/#v2150-29-oct-2021","title":"v2.15.0 - 29 Oct 2021","text":""},{"location":"CHANGELOG/#introduces_1","title":"Introduces","text":"<ul> <li>[vRO-Polyglot] Move dependency resolution from NPM to Artifactory</li> <li>[vRA-NG] Catalog items support with custom forms and icons</li> </ul>"},{"location":"CHANGELOG/#enhancements_13","title":"Enhancements","text":"<ul> <li>[vRO] Improve logging when vropkg fails to parse JS</li> </ul>"},{"location":"CHANGELOG/#fixes_23","title":"Fixes","text":"<ul> <li>[vRO] Signing issue due to vRA dependency</li> </ul>"},{"location":"CHANGELOG/#v21418-27-oct-2021","title":"v2.14.18 - 27 Oct 2021","text":""},{"location":"CHANGELOG/#introduces_2","title":"Introduces","text":"<ul> <li>[vRA-NG] Configuration to wait for data collection during import</li> <li>[vRA-NG] Added a new vrang.data.collection.delay.seconds properties to force a wait of   a variable amount of time for vRA data collection to pass before importing</li> </ul>"},{"location":"CHANGELOG/#enhancements_14","title":"Enhancements","text":"<ul> <li>[vRO-Polyglot] \"Memory limit\" and \"Timeout\" attributes support for polyglot actions</li> <li>[vRA-NG] Default timeout configuration for import content process</li> </ul>"},{"location":"CHANGELOG/#fixes_24","title":"Fixes","text":"<ul> <li>[vRO] Add charset-detector to bundled dependencies</li> <li>[vRO] Resource elements support fix for 7.X</li> </ul>"},{"location":"CHANGELOG/#v21417-13-oct-2021","title":"v2.14.17 - 13 Oct 2021","text":""},{"location":"CHANGELOG/#introduces_3","title":"Introduces","text":"<ul> <li>[vRO-Polyglot] Support for polyglot actions invocation</li> <li>[vRO-Polyglot] Extend vrotsc to support referencing polyglot actions in TypeScript workflows   using decorators</li> </ul>"},{"location":"CHANGELOG/#enhancements_15","title":"Enhancements","text":"<ul> <li>[vRA-NG] Timeout configuration for import content process</li> </ul>"},{"location":"CHANGELOG/#fixes_25","title":"Fixes","text":"<ul> <li>[vRA-NG] Resource action custom forms support</li> <li>[vRA-NG] Authentication changes for multi-tenant setup</li> <li>[vRO] Ignoring node_modules in XML, JavaScript and mixed projects</li> <li>[vRO] Fixed a JSON structure logging issue which caused error \"Not a valid package file, dunes-meta-inf is missing !\"   when pushing to vRO</li> <li>[vRO] Fixed non-latin character support on vRO content import</li> <li>[vRA-NG] Subscriptions import support for multi-tenant setup</li> <li>[vRA-NG] Entitlements import support for multi-tenant setup</li> <li>[vRA-NG] Content sources import support for multi-tenant setup</li> <li>[vRA-NG] Custom resource day2 actions support for multi-tenant setup</li> <li>[vRA-NG] Support custom resources updates via vrealize:push</li> <li>[vRA-NG] Failure of vrealize:push on creating an entitlement without custom from</li> <li>[vRO] Empty JavaScript actions cleanup</li> </ul>"},{"location":"CHANGELOG/#v21416-08-sep-2021","title":"v2.14.16 - 08 Sep 2021","text":""},{"location":"CHANGELOG/#v21415-25-aug-2021","title":"v2.14.15 - 25 Aug 2021","text":""},{"location":"CHANGELOG/#v21414-23-aug-2021","title":"v2.14.14 - 23 Aug 2021","text":""},{"location":"CHANGELOG/#v21413-03-aug-2021","title":"v2.14.13 - 03 Aug 2021","text":""},{"location":"CHANGELOG/#v21412-19-jul-2021","title":"v2.14.12 - 19 Jul 2021","text":""},{"location":"CHANGELOG/#v21411-13-jul-2021","title":"v2.14.11 - 13 Jul 2021","text":""},{"location":"CHANGELOG/#v21410-09-jul-2021","title":"v2.14.10 - 09 Jul 2021","text":""},{"location":"CHANGELOG/#v2149-30-jun-2021","title":"v2.14.9 - 30 Jun 2021","text":""},{"location":"CHANGELOG/#v2148-28-jun-2021","title":"v2.14.8 - 28 Jun 2021","text":""},{"location":"CHANGELOG/#v2147-25-jun-2021","title":"v2.14.7 - 25 Jun 2021","text":""},{"location":"CHANGELOG/#v2146-22-jun-2021","title":"v2.14.6 - 22 Jun 2021","text":""},{"location":"CHANGELOG/#v2145-21-jun-2021","title":"v2.14.5 - 21 Jun 2021","text":""},{"location":"CHANGELOG/#v2144-17-jun-2021","title":"v2.14.4 - 17 Jun 2021","text":""},{"location":"CHANGELOG/#v2143-15-jun-2021","title":"v2.14.3 - 15 Jun 2021","text":""},{"location":"CHANGELOG/#v2142-14-jun-2021","title":"v2.14.2 - 14 Jun 2021","text":""},{"location":"CHANGELOG/#v2141-28-may-2021","title":"v2.14.1 - 28 May 2021","text":""},{"location":"CHANGELOG/#v2138-28-may-2021","title":"v2.13.8 - 28 May 2021","text":""},{"location":"CHANGELOG/#v2137-21-may-2021","title":"v2.13.7 - 21 May 2021","text":""},{"location":"CHANGELOG/#v2136-20-may-2021","title":"v2.13.6 - 20 May 2021","text":""},{"location":"CHANGELOG/#v2135-14-may-2021","title":"v2.13.5 - 14 May 2021","text":"<ul> <li>[vRA-NG] Fixed issue when importing subscription in multi-tenant vRA environments</li> </ul>"},{"location":"CHANGELOG/#v2134-12-may-2021","title":"v2.13.4 - 12 May 2021","text":""},{"location":"CHANGELOG/#v2133-10-may-2021","title":"v2.13.3 - 10 May 2021","text":""},{"location":"CHANGELOG/#v2132-05-may-2021","title":"v2.13.2 - 05 May 2021","text":""},{"location":"CHANGELOG/#v2131-20-apr-2021","title":"v2.13.1 - 20 Apr 2021","text":""},{"location":"CHANGELOG/#v2131-20-apr-2021_1","title":"v2.13.1 - 20 Apr 2021","text":""},{"location":"CHANGELOG/#v2131-20-apr-2021_2","title":"v2.13.1 - 20 Apr 2021","text":""},{"location":"CHANGELOG/#v2131-20-apr-2021_3","title":"v2.13.1 - 20 Apr 2021","text":"<ul> <li>[vRO] Changed vRO module dependencies to version 7.3.1</li> <li>[vRO] Fixed issue with packaging new configuration element value format introduced in patches of vRO 7.5 and 7.6</li> </ul>"},{"location":"CHANGELOG/#v2127-05-apr-2021","title":"v2.12.7 - 05 Apr 2021","text":""},{"location":"CHANGELOG/#v2126-26-mar-2021","title":"v2.12.6 - 26 Mar 2021","text":""},{"location":"CHANGELOG/#v2125-16-mar-2021","title":"v2.12.5 - 16 Mar 2021","text":""},{"location":"CHANGELOG/#v2124-13-feb-2021","title":"v2.12.4 - 13 Feb 2021","text":""},{"location":"CHANGELOG/#v2123-11-feb-2021","title":"v2.12.3 - 11 Feb 2021","text":""},{"location":"CHANGELOG/#v2122-21-jan-2021","title":"v2.12.2 - 21 Jan 2021","text":""},{"location":"CHANGELOG/#enhancement","title":"Enhancement","text":"<ul> <li>[MVN] Fixed ussue with installer timeouts</li> </ul>"},{"location":"CHANGELOG/#v2121-10-jan-2021","title":"v2.12.1 - 10 Jan 2021","text":""},{"location":"CHANGELOG/#v2120-08-jan-2021","title":"v2.12.0 - 08 Jan 2021","text":""},{"location":"CHANGELOG/#enhancement_1","title":"Enhancement","text":"<ul> <li>[TS] vRO pkg - Adds support for slash in workflow path or name</li> <li>[vRBT] vRBT installer - updated documentation, added checking of workflow input, writing of workflow error message to   file, setting of installer exit code when executing of a workflow</li> </ul>"},{"location":"CHANGELOG/#v2111-01-dec-2020","title":"v2.11.1 - 01 Dec 2020","text":""},{"location":"CHANGELOG/#v2110-26-nov-2020","title":"v2.11.0 - 26 Nov 2020","text":""},{"location":"CHANGELOG/#enhancement_2","title":"Enhancement","text":"<ul> <li>[TS] Allow additional trigger events for policies trigered by the vcd mqtt plugin</li> </ul>"},{"location":"CHANGELOG/#v2102-17-nov-2020","title":"v2.10.2 - 17 Nov 2020","text":""},{"location":"CHANGELOG/#enhancement_3","title":"Enhancement","text":"<ul> <li>[MVN] Fix Missing vRA Tenant After Successful package import</li> <li>[MVN] Fix vROPS imoport fails on certain assets</li> </ul>"},{"location":"CHANGELOG/#v2101-06-nov-2020","title":"v2.10.1 - 06 Nov 2020","text":""},{"location":"CHANGELOG/#v2100-02-nov-2020","title":"v2.10.0 - 02 Nov 2020","text":""},{"location":"CHANGELOG/#enhancement_4","title":"Enhancement","text":"<ul> <li>[MVN] Improve Package-Installer and fix project versions and dependencies</li> </ul>"},{"location":"CHANGELOG/#v290-26-oct-2020","title":"v2.9.0 - 26 Oct 2020","text":""},{"location":"CHANGELOG/#enhancement_5","title":"Enhancement","text":"<ul> <li>[MVN] Polyglot archetype - regex support in yaml defs for vrli</li> <li>[MVN] Regex support in YAML defs for vROPS archetype</li> </ul>"},{"location":"CHANGELOG/#v288-24-sep-2020","title":"v2.8.8 - 24 Sep 2020","text":""},{"location":"CHANGELOG/#v287-23-sep-2020","title":"v2.8.7 - 23 Sep 2020","text":""},{"location":"CHANGELOG/#v286-02-sep-2020","title":"v2.8.6 - 02 Sep 2020","text":""},{"location":"CHANGELOG/#enhancement_6","title":"Enhancement","text":"<ul> <li>[MVN] Support SHA1 checksum generation for JS,TS,XML,vRA,vRANG project types.</li> <li>[MVN] Include the pom.xml description content as description of the built vRO package artifact</li> <li>[TS-AutoGen] Define a  property for storing the version of the API for which this project is generated. <li>[TS-AutoGen] Store the API version as part of the vRO package description.</li> <li>[vRA-NG] Adds support for import/export of custom resources and resource actions.</li>"},{"location":"CHANGELOG/#v285-30-jul-2020","title":"v2.8.5 - 30 Jul 2020","text":""},{"location":"CHANGELOG/#enhancement_7","title":"Enhancement","text":"<ul> <li>[MVN] Fixed problem with vROPs project build after generating it using vROPs archetype</li> </ul>"},{"location":"CHANGELOG/#v284-23-jul-2020","title":"v2.8.4 - 23 Jul 2020","text":""},{"location":"CHANGELOG/#v283-21-jul-2020","title":"v2.8.3 - 21 Jul 2020","text":""},{"location":"CHANGELOG/#v282-21-jul-2020","title":"v2.8.2 - 21 Jul 2020","text":""},{"location":"CHANGELOG/#enhancement_8","title":"Enhancement","text":"<ul> <li>[vRLI] Fixed bug in rewriting of the alert vCops intergation</li> <li>[vRO] Added vro configuration validation for SSO authentication when vro tenant is present in settings.xml</li> <li>[vRBT] Fixed bug when vRBT fails to find vro port configuration on embedded vro</li> </ul>"},{"location":"CHANGELOG/#v281-02-jul-2020","title":"v2.8.1 - 02 Jul 2020","text":""},{"location":"CHANGELOG/#v280-30-jun-2020","title":"v2.8.0 - 30 Jun 2020","text":""},{"location":"CHANGELOG/#v271-16-jun-2020","title":"v2.7.1 - 16 Jun 2020","text":""},{"location":"CHANGELOG/#enhancement_9","title":"Enhancement","text":"<ul> <li>[TS] Typescript projects for vRO, now support syntax for specifying a description for a configuration element attribute.</li> <li>[vRA-NG] Adds support for using project name when managing vRA-NG content.</li> <li>[MVN] License-management</li> </ul>"},{"location":"CHANGELOG/#v270-04-jun-2020","title":"v2.7.0 - 04 Jun 2020","text":""},{"location":"CHANGELOG/#enhancement_10","title":"Enhancement","text":"<ul> <li>[vROps] Adds support for vROps 8.1</li> <li>[vROps] Change default authentication provider to Token-based Authentication</li> <li>[TS] Extend vropkg tool to support Polyglot bundle</li> <li>[TS] Support for skipping unmapped dependencies, e.g. --skipUnmappedDeps</li> <li>[vRBT] Use prebuild gitlab-runner image from pscoelab repository</li> </ul>"},{"location":"CHANGELOG/#v261-29-may-2020","title":"v2.6.1 - 29 May 2020","text":""},{"location":"CHANGELOG/#v260-21-may-2020","title":"v2.6.0 - 21 May 2020","text":""},{"location":"CHANGELOG/#v2512-13-may-2020","title":"v2.5.12 - 13 May 2020","text":""},{"location":"CHANGELOG/#enhancement_11","title":"Enhancement","text":"<ul> <li>[TS] Bumped up Typescript version to 3.8.3</li> <li>[TS] Added support for tsconfig file override using the project option of the tsc executable.</li> </ul>"},{"location":"CHANGELOG/#v2511-13-may-2020","title":"v2.5.11 - 13 May 2020","text":""},{"location":"CHANGELOG/#enhancement_12","title":"Enhancement","text":"<ul> <li>[MVN] Updated vRBT infrastructure project with latest dependencies and improved installation robustness</li> </ul>"},{"location":"CHANGELOG/#fixes_26","title":"Fixes","text":"<ul> <li>[vROps] Fixes a problem with resource kind during alert definition import</li> <li>[TS] Use fixed node package versions</li> <li>[TS] Fixed vCD build process</li> </ul>"},{"location":"CHANGELOG/#v2510-07-may-2020","title":"v2.5.10 - 07 May 2020","text":""},{"location":"CHANGELOG/#enhancement_13","title":"Enhancement","text":"<ul> <li>[vROps] Support for policy assignment to custom groups</li> </ul>"},{"location":"CHANGELOG/#fixes_27","title":"Fixes","text":"<ul> <li>[vRA] Fixes a problem with vra-ng authentication always setting System Domain and users not being able to authenticate   with different domain</li> <li>[vROps] Removed sshHost from Installer. Use host instead.</li> </ul>"},{"location":"CHANGELOG/#v259-05-may-2020","title":"v2.5.9 - 05 May 2020","text":""},{"location":"CHANGELOG/#v258-30-apr-2020","title":"v2.5.8 - 30 Apr 2020","text":""},{"location":"CHANGELOG/#v257-24-apr-2020","title":"v2.5.7 - 24 Apr 2020","text":""},{"location":"CHANGELOG/#v256-21-apr-2020","title":"v2.5.6 - 21 Apr 2020","text":""},{"location":"CHANGELOG/#v255-15-apr-2020","title":"v2.5.5 - 15 Apr 2020","text":""},{"location":"CHANGELOG/#v254-13-apr-2020","title":"v2.5.4 - 13 Apr 2020","text":""},{"location":"CHANGELOG/#v253-08-apr-2020","title":"v2.5.3 - 08 Apr 2020","text":""},{"location":"CHANGELOG/#v252-07-apr-2020","title":"v2.5.2 - 07 Apr 2020","text":""},{"location":"CHANGELOG/#enhancements_16","title":"Enhancements","text":"<ul> <li>[TS] Make dependency:go-offline execution conditional</li> </ul>"},{"location":"CHANGELOG/#v251-02-apr-2020","title":"v2.5.1 - 02 Apr 2020","text":""},{"location":"CHANGELOG/#v251-02-apr-2020_1","title":"v2.5.1 - 02 Apr 2020","text":""},{"location":"CHANGELOG/#v250-22-mar-2020","title":"v2.5.0 - 22 Mar 2020","text":""},{"location":"CHANGELOG/#enhancements_17","title":"Enhancements","text":"<p>[TS] All version of Node are supported from 10.x and above [TS] npm repository is no longer needed [TS] Support for RequireJS imports/exports [TS] Support for yaml configurations [TS] Improved workflows and policy templates transpilation [TS] Improved diagnostic messages [TS] Improved handling of cycle references [TS] Extended workflow support [TS] Support for ES2017.String [TS] Emitting a warning header at the top of each file (controllable through vrotsc.emitHeader=true)</p>"},{"location":"CHANGELOG/#v2420-06-mar-2020","title":"v2.4.20 - 06 Mar 2020","text":""},{"location":"CHANGELOG/#v2419-02-mar-2020","title":"v2.4.19 - 02 Mar 2020","text":""},{"location":"CHANGELOG/#v2418-21-feb-2020","title":"v2.4.18 - 21 Feb 2020","text":""},{"location":"CHANGELOG/#v2417-11-feb-2020","title":"v2.4.17 - 11 Feb 2020","text":""},{"location":"CHANGELOG/#v2416-07-feb-2020","title":"v2.4.16 - 07 Feb 2020","text":""},{"location":"CHANGELOG/#v2415-20-jan-2020","title":"v2.4.15 - 20 Jan 2020","text":""},{"location":"CHANGELOG/#enhancements_18","title":"Enhancements","text":"<ul> <li>[JS] Support persistent Actions IDs pulled from server</li> </ul>"},{"location":"CHANGELOG/#v2414-16-jan-2020","title":"v2.4.14 - 16 Jan 2020","text":""},{"location":"CHANGELOG/#enhancements_19","title":"Enhancements","text":"<ul> <li>[MVN] Unify vRO packaging mechanism for TS/XML/JS based projects.</li> </ul>"},{"location":"CHANGELOG/#v2413-13-jan-2020","title":"v2.4.13 - 13 Jan 2020","text":""},{"location":"CHANGELOG/#v2412-09-jan-2020","title":"v2.4.12 - 09 Jan 2020","text":""},{"location":"CHANGELOG/#v2411-20-dec-2019","title":"v2.4.11 - 20 Dec 2019","text":""},{"location":"CHANGELOG/#v2410-18-dec-2019","title":"v2.4.10 - 18 Dec 2019","text":""},{"location":"CHANGELOG/#v249-16-dec-2019","title":"v2.4.9 - 16 Dec 2019","text":""},{"location":"CHANGELOG/#v248-16-dec-2019","title":"v2.4.8 - 16 Dec 2019","text":""},{"location":"CHANGELOG/#enhancements_20","title":"Enhancements","text":"<ul> <li>[MVN] Add support for generating and using a TS Autogen project based on @vmware-pscoe/ts-swagger-generator NPM package</li> </ul>"},{"location":"CHANGELOG/#v246-16-dec-2019","title":"v2.4.6 - 16 Dec 2019","text":""},{"location":"CHANGELOG/#fixes_28","title":"Fixes","text":"<ul> <li>[TS] Error during .ts local imports metadata collection</li> </ul>"},{"location":"CHANGELOG/#v245-11-dec-2019","title":"v2.4.5 - 11 Dec 2019","text":""},{"location":"CHANGELOG/#fixes_29","title":"Fixes","text":"<ul> <li>[MVN] Normalize filename for vra:pull-ed catalog item icons</li> </ul>"},{"location":"CHANGELOG/#v244-09-dec-2019","title":"v2.4.4 - 09 Dec 2019","text":""},{"location":"CHANGELOG/#v243-02-dec-2019","title":"v2.4.3 - 02 Dec 2019","text":""},{"location":"CHANGELOG/#fixes_30","title":"Fixes","text":"<ul> <li>[TS] Fix interface and type declarations imports imposed that do not exist at runtime, which causes errors resolving vrotsc-annotations and in some cases cyrcular dependencies issues.</li> </ul>"},{"location":"CHANGELOG/#v242-28-nov-2019","title":"v2.4.2 - 28 Nov 2019","text":""},{"location":"CHANGELOG/#enhancements_21","title":"Enhancements","text":"<ul> <li>[MVN] Add support for running workflows against vRO version 7.6 and above</li> </ul>"},{"location":"CHANGELOG/#fixes_31","title":"Fixes","text":"<ul> <li>[MVN] Fix missing vra-ng-package-maven-plugin to repository</li> <li>[MVN] Fix failure in TS Tests executed on Windows by increasing default JVM Heap size for background jobs.</li> <li>[TS] Fix Tests failing if TS project contains dash in artifactId.</li> </ul>"},{"location":"CHANGELOG/#v241-27-nov-2019","title":"v2.4.1 - 27 Nov 2019","text":""},{"location":"CHANGELOG/#fixes_32","title":"Fixes","text":"<p>[MVN] fix installDeps when .m2 repo has not cached the required dependencies. Use dependency:go-offline to ensure they are cached.</p>"},{"location":"CHANGELOG/#v240-13-nov-2019","title":"v2.4.0 - 13 Nov 2019","text":""},{"location":"CHANGELOG/#v203-12-nov-2019","title":"v2.0.3 - 12 Nov 2019","text":""},{"location":"CHANGELOG/#v202-12-nov-2019","title":"v2.0.2 - 12 Nov 2019","text":""},{"location":"CHANGELOG/#enhancements_22","title":"Enhancements","text":"<ul> <li>[TS] Add npmconv utility for converting pure TS based NPM-based projects to vRO project structure.</li> <li>[MVN] Add support for vRA 8 user/pass authentication for on-prem instance.</li> <li>[MVN] Add support for flavor profiles to exported from vRA 8</li> </ul>"},{"location":"CHANGELOG/#v201-12-nov-2019","title":"v2.0.1 - 12 Nov 2019","text":""},{"location":"CHANGELOG/#v200-07-nov-2019","title":"v2.0.0 - 07 Nov 2019","text":""},{"location":"CHANGELOG/#enhancements_23","title":"Enhancements","text":"<ul> <li>[TS] BREAKING CHANGE .d.ts packages are now under different @types/ module name that uses dot notation. For example, when importing you need to use \"com.vmware.pscoe.npm.inversify\" instead of previously output \"com-vmware-pscoe-npm-inversify\" module name.</li> </ul>"},{"location":"CHANGELOG/#v174-07-nov-2019","title":"v1.7.4 - 07 Nov 2019","text":""},{"location":"CHANGELOG/#fixes_33","title":"Fixes","text":"<ul> <li>[internal] Ensure consistent build and that all vrotsc tests are passing</li> </ul>"},{"location":"CHANGELOG/#v173-06-nov-2019","title":"v1.7.3 - 06 Nov 2019","text":""},{"location":"CHANGELOG/#enhancements_24","title":"Enhancements","text":"<ul> <li>[TS] Support cyclic dependencies when they are variable ref is in scoped context</li> </ul>"},{"location":"CHANGELOG/#v172-01-nov-2019","title":"v1.7.2 - 01 Nov 2019","text":""},{"location":"CHANGELOG/#fixes_34","title":"Fixes","text":"<ul> <li>[TS] Fix .d.ts is not generated if .ts contains only type definitions</li> <li>[MVN] Fix support vRO8 auth with short username when on-prem vRA8</li> </ul>"},{"location":"CHANGELOG/#v171-10-oct-2019","title":"v1.7.1 - 10 Oct 2019","text":""},{"location":"CHANGELOG/#fixes_35","title":"Fixes","text":"<ul> <li>[TS] Ensure .d.ts parts of src/ folder are visited by underlying tsc program as well.</li> </ul>"},{"location":"CHANGELOG/#v170-09-oct-2019","title":"v1.7.0 - 09 Oct 2019","text":""},{"location":"CHANGELOG/#enhancements_25","title":"Enhancements","text":"<ul> <li>[TS] Add support for module import</li> <li>[TS] typescript 3.6.3 updated with support for EmitHelpers and __spreadArray by default.</li> <li>[TS] Migrate to using tsc native class genration and super execution to support default decorators and reflect-metadata</li> </ul>"},{"location":"CHANGELOG/#fixes_36","title":"Fixes","text":"<ul> <li>[TS] Fix Promise.await ignored for async class-based method declarations</li> <li>[TS] Fix reference tracking for variable re-exporting with rename</li> <li>[TS] rework ESShim.merge implementation and fallback on default __asign EmitHelper provided by tsc.</li> <li>[TS] Update archetype tsConfig to limit runtime libs to only those supported by vRO</li> <li>[TS] remove custom implementation for .d.ts generation and fallback to tsc instetad to resolve numerous problems with declaration files</li> <li>[TS] fix number of issues with inaccessible properties being exported in transpiled code.</li> <li>[TS] reduce code optimizaiton efforts and ensure empty .d.ts &amp; .js files are preserved as those might be referenced exernally.</li> <li>[TS] Fix support of empty files (e.g. pure-interfacees) on import/export transpiled code.</li> <li>[TS] Fix source file traversal and transformation and thus simplifying literal/identifier/comments handling</li> <li>[TS] Remove custom super call handling and leave default tsc handling.</li> <li>[TS] Remove import optimizations as impacting correctness of imports.</li> </ul>"},{"location":"CHANGELOG/#v160-11-sep-2019","title":"v1.6.0 - 11 Sep 2019","text":""},{"location":"CHANGELOG/#enhancements_26","title":"Enhancements","text":"<ul> <li>[MVN] vrealize:push goal now supports vCloud Director Angular UI extension projects</li> <li>[PI] Package installer now supports vCloud Director Angular UI extension projects</li> <li>[MVN] Support for XML workflow representation in TypeScript projects</li> <li>[MVN] Support for decorators in TypeScript projects.</li> <li>[MVN] Implement support for vCloud Director Angular UI extension projects</li> <li>[TS] Support for vRO policies in TypeScript projects. Files ending with .pl.ts will be transpiled as a vRO policy template.</li> <li>[TS] Enhanced support for vRO resource elements in TypeScript projects.</li> <li>[TS] Enhanced support for vRO configurations and workflows in TypeScript projects.</li> <li>[TS] Windows support for TypeScript projects.</li> </ul>"},{"location":"CHANGELOG/#v1511-09-may-2019","title":"v1.5.11 - 09 May 2019","text":""},{"location":"CHANGELOG/#enhancements_27","title":"Enhancements","text":"<ul> <li>Add <code>generated.from</code> Maven property to the root POM of all archetypes. This can be used to differentiate which \"template\" was used to generate the project, for example in the context of a CI pipeline.</li> </ul>"},{"location":"CHANGELOG/#v1510-19-apr-2019","title":"v1.5.10 - 19 Apr 2019","text":""},{"location":"CHANGELOG/#enhancements_28","title":"Enhancements","text":"<ul> <li>Include CHANGELOG.md in the final tool chain bundle.</li> </ul>"},{"location":"CHANGELOG/#v159-19-apr-2019","title":"v1.5.9 - 19 Apr 2019","text":""},{"location":"CHANGELOG/#enhancements_29","title":"Enhancements","text":"<ul> <li><code>vro:pull</code>, <code>vra:pull</code> and <code>vra:auth</code> Maven goals now support the SSL verification flags to be set as properties in a Maven profile, similarly to the <code>vrealize:push</code> goal.</li> </ul>"},{"location":"CHANGELOG/#fixes_37","title":"Fixes","text":"<ul> <li>When using the Bundle Installer with a properties file the value of <code>vro_delete_old_versions</code> used to be ignored - if the property was present, the installer would do the cleanup. Now, if the property is not present it is considered false. If it is present, however, its value will be used to opt-in for the cleanup.</li> </ul>"},{"location":"CHANGELOG/#v158-15-apr-2019","title":"v1.5.8 - 15 Apr 2019","text":""},{"location":"CHANGELOG/#enhancements_30","title":"Enhancements","text":"<ul> <li>Support for gradual migration from JS-based projects to TypeScript ones by allowing .js files in src/ folder to be respected at TS copilation stage.</li> <li>Support for vRO resource elements to be included in package. TS projects can contain any files that are not .ts and .js under src/ directory and those will carried over.</li> <li>(internal) Improvement of unit-test parallel execution and sub-suite instantiation for easier debugging/testing purposes.</li> </ul>"},{"location":"CHANGELOG/#v157-03-apr-2019","title":"v1.5.7 - 03 Apr 2019","text":""},{"location":"CHANGELOG/#enhancements_31","title":"Enhancements","text":"<ul> <li>Installer CLI now prompts for SSL verification flags. Default is still to verify the certificate against Java's key store (i.e. cacerts) and to verify the hostname. Those flags can be persisted and controlled via the environment's <code>.properties</code> file.</li> <li>vrealize:push Maven goal now supports the SSL verification flags to be set as properties in a Maven profile, i.e. you can add <code>&lt;vrealize.ssl.ignore.certificate&gt;true&lt;/vrealize.ssl.ignore.certificate&gt;</code> under <code>&lt;properties&gt;</code> in an active Maven profile to skip the certificate verification against JAVA's key store (i.e. cacerts). You can also add <code>&lt;vrealize.ssl.ignore.hostname&gt;true&lt;/vrealize.ssl.ignore.hostname&gt;</code> to skip the hostname verification. WARNING this is intended for use with production endpoints. For those cases, register vRA/vRO certificate in Java's key store and access the endpoint using its FQDN.</li> </ul>"},{"location":"CHANGELOG/#v156-27-mar-2019","title":"v1.5.6 - 27 Mar 2019","text":""},{"location":"CHANGELOG/#enhancements_32","title":"Enhancements","text":"<ul> <li>BREAKING All certificates are now verified as part of API calls from the toolchain to vRA/vRO:</li> <li>Verify hostname - the hostname if the vRO/vRA server should match the CN of the SSL certificate. For development environments, this can be skipped by a flag described in documentation.</li> <li> <p>Verify certificate - the SSL certificate used by vRO/vRA is verified against the Java default keystore, i.e. <code>cacerts</code>. Self-signed or third-party certificates have to either be addded to the trusted store (or their CA) or the check can be ignored for development environments by a flag described in documentation.</p> </li> <li> <p>Improved logging when installing packages - logs will report which package will be included (pass) and which will be excluded (skip).</p> </li> <li><code>vrealize:push</code> will import all packages per type in a single batch, reporting what will be included (pass) and excluded (skip).</li> </ul>"},{"location":"CHANGELOG/#fixes_38","title":"Fixes","text":"<ul> <li>Installer overwrites newer versions of packages found on the server if a concrete source package, e.g. v1.0.2 is not found.</li> <li><code>vrealize:push</code> downgrades dependent packages, i.e. it will always forcefully install the concrete versions of the dependencies regardless of the state of the target vRO/vRA server. This is still possible if an additianal flag is passed to the command: <code>-Dvro.importOldVersions</code> and respectively <code>-Dvra.importOldVersions</code>.</li> </ul>"},{"location":"CHANGELOG/#v155-14-mar-2019","title":"v1.5.5 - 14 Mar 2019","text":""},{"location":"CHANGELOG/#fixes_39","title":"Fixes","text":"<ul> <li>Pulling a vRO actions project from a Windows workstation leads to wrong identation in actions JavaScript files.</li> </ul>"},{"location":"CHANGELOG/#v154-13-mar-2019","title":"v1.5.4 - 13 Mar 2019","text":""},{"location":"CHANGELOG/#fixes_40","title":"Fixes","text":"<ul> <li>Issue related to vRO multi-tenantcy authentication. When toolchain worked with a vRO in a multi-tenant mode it tooked tenant name as domain name instead of the real domain name for login which caused authentication issues for non-default tenants.</li> <li>Issue related to the unit-tests executor of vRO actions-based projects on Windows. Inability to run unit-tests on Windows development workstation.</li> <li>Regression issue related to import/export of vRA composite blueprints for vRA versions before 7.4, as custom forms API is not supported in these versions.</li> </ul>"},{"location":"CHANGELOG/#known-issues_1","title":"Known Issues","text":"<ul> <li>VS Code Extension and Maven plugins cannot work against default tenant (vsphere.local) and custom tenant at the same time, when vRO is configured in a multi-tenant mode. This limitations comes from multi-tenant implementation in vRO where Resource Elements created in the default tenant are read-only for all other tenants.   This issue could be worked around by not usting the toolchain against default tenant in multi-tenant environment.</li> </ul>"},{"location":"CHANGELOG/#v153-05-mar-2019","title":"v1.5.3 - 05 Mar 2019","text":""},{"location":"CHANGELOG/#v152-28-feb-2019","title":"v1.5.2 - 28 Feb 2019","text":""},{"location":"CHANGELOG/#v151-11-feb-2019","title":"v1.5.1 - 11 Feb 2019","text":""},{"location":"CHANGELOG/#fixes_41","title":"Fixes","text":"<ul> <li>Excessive collection triggering and 100 percent CPU usage for several minutes when VSCode auto-saving is enabled or frequent saves are used</li> <li>Collection will be triggered only if files are created or deleted instead of on each change</li> <li>Collection will be delayed with 10 seconds - that way when pulling many files the multiple change events will trigger only one colelction</li> <li>Run Action command now supports vRO 7.3 and lower</li> <li>Untitled files and files without IIFE now have correct autocompletion</li> </ul>"},{"location":"CHANGELOG/#known-issues_2","title":"Known Issues","text":"<ul> <li>Cannot build project generated with groupId or artifactId that contain special characters.</li> <li>Cause: The Jasmine tests are unable to compile if the folder hierarchy contains characters that are not allowed in Java packages.</li> <li>Workaround: If a generated project contains special characters in its groupId or artifactId, rename all subfolders in test/ and src/ to not include any non-compatible with the Java package convention characters.</li> <li>Exporting vRA blueprints without custom forms logs error message \"null\". This is a bug in underling REST client library.</li> </ul>"},{"location":"CHANGELOG/#v150-04-feb-2019","title":"v1.5.0 - 04 Feb 2019","text":""},{"location":"CHANGELOG/#enhancements_33","title":"Enhancements","text":"<ul> <li>New command in the vscode extension - vRO: Run Action</li> <li>Allows running an action JavaScript file in vRO while seeing the logs in VSCode.</li> <li>Available both in the Command Palette and as <code>zap</code> icon on the editor's tab bar.</li> <li>Implemented code coverage report produced by running Jasmin unit tests. The report is in lcov.info format, which is readable by Sonar.</li> </ul>"},{"location":"CHANGELOG/#known-issues_3","title":"Known Issues","text":"<ul> <li>Cannot build project generated with groupId or artifactId that contain special characters.</li> <li>Cause: The Jasmine tests are unable to compile if the folder hierarchy contains characters that are not allowed in Java packages.</li> <li>Workaround: If a generated project contains special characters in its groupId or artifactId, rename all subfolders in test/ and src/ to not include any non-compatible with the Java package convention characters.</li> <li>Exporting vRA blueprints without custom forms logs error message \"null\". This is a bug in underling REST client library.</li> </ul>"},{"location":"CHANGELOG/#v141-01-feb-2019","title":"v1.4.1 - 01 Feb 2019","text":""},{"location":"CHANGELOG/#enhancements_34","title":"Enhancements","text":"<ul> <li>New setting to exclude certain projects from the list of build tasks (<code>Cmd+Shift+B</code>) by using glob patterns <pre><code>\"o11n.tasks.exclude\" : [\n    \"com.vmware.pscoe.library*\", // Exclude all PSCoE libraries\n    \"!com.vmware.pscoe.library*\", // Exclude everything, except PSCoE libraries\n    \"com.vmware.pscoe.!(library*)\", // Exclude everything PSCoE, except libraries\n    \"com.vmware.pscoe.library:{nsx,vra,vc}\", // Exclude nsx, vra and vc libraries\n    \"com.vmware.pscoe.library:util\" // Exclude util library (&lt;groupId&gt;:&lt;artifactId&gt;)\n]\n</code></pre></li> </ul>"},{"location":"CHANGELOG/#known-issues_4","title":"Known Issues","text":"<ul> <li>Cannot build project generated with groupId or artifactId that contain special characters.</li> <li>Cause: The Jasmine tests are unable to compile if the folder hierarchy contains characters that are not allowed in Java packages.</li> <li>Workaround: If a generated project contains special characters in its groupId or artifactId, rename all subfolders in test/ and src/ to not include any non-compatible with the Java package convention characters.</li> <li>Exporting vRA blueprints without custom forms logs error message \"null\". This is a bug in underling REST client library.</li> </ul>"},{"location":"CHANGELOG/#v140-25-jan-2019","title":"v1.4.0 - 25 Jan 2019","text":""},{"location":"CHANGELOG/#enhancements_35","title":"Enhancements","text":"<ul> <li>Support for Multi-root Workspaces that allow opening more than one vRO project into single vscode window.</li> <li>Dynamically create build tasks (<code>Cmd+Shift+B</code>) based on project's type and modules.</li> <li>New pom.xml diagnostics</li> <li>Show inline warning, if toolchain version in pom.xml file is lower than the vscode extension's version.</li> <li>Provide quick fix action in pom.xml that replaces the parent version with the vscode extension's version.</li> <li>Support for export/import of vRA custom forms.</li> <li>Support for clean up task of vRA/vRO packages from server.</li> <li>Clean up of the current version and/or old versions and their dependencies.</li> <li>Supported via \"mvn\" command or package installer</li> </ul>"},{"location":"CHANGELOG/#known-issues_5","title":"Known Issues","text":"<ul> <li>Cannot build project generated with groupId or artifactId that contain special characters.</li> <li>Cause: The Jasmine tests are unable to compile if the folder hierarchy contains characters that are not allowed in Java packages.</li> <li>Workaround: If a generated project contains special characters in its groupId or artifactId, rename all subfolders in test/ and src/ to not include any non-compatible with the Java package convention characters.</li> <li>Exporting vRA blueprints without custom forms logs error message \"null\". This is a bug in underling REST client library.</li> </ul>"},{"location":"CHANGELOG/#v1310-01-nov-2018","title":"v1.3.10 - 01 Nov 2018","text":""},{"location":"CHANGELOG/#fixes_42","title":"Fixes","text":"<ul> <li>The vscode extension cannot load when the project location contains spaces or other characters that are percent-encoded in URIs</li> <li>Push does not work for vRA packages built on Windows</li> </ul>"},{"location":"CHANGELOG/#known-issues_6","title":"Known Issues","text":"<ul> <li>Cannot build project generated with groupId or artifactId that contain special characters.</li> <li>Cause: The Jasmine tests are unable to compile if the folder hierarchy contains characters that are not allowed in Java packages.</li> <li>Workaround: If a generated project contains special characters in its groupId or artifactId, rename all subfolders in test/ and src/ to not include any non-compatible with the Java package convention characters.</li> </ul>"},{"location":"CHANGELOG/#v138-24-oct-2018","title":"v1.3.8 - 24 Oct 2018","text":""},{"location":"CHANGELOG/#fixes_43","title":"Fixes","text":"<ul> <li>The vscode extension cannot generate projects with spaces in the workflows path parameter.</li> </ul>"},{"location":"CHANGELOG/#known-issues_7","title":"Known Issues","text":"<ul> <li>Cannot build project generated with groupId or artifactId that contain special characters.</li> <li>Cause: The Jasmine tests are unable to compile if the folder hierarchy contains characters that are not allowed in Java packages.</li> <li>Workaround: If a generated project contains special characters in its groupId or artifactId, rename all subfolders in test/ and src/ to not include any non-compatible with the Java package convention characters.</li> </ul>"},{"location":"CHANGELOG/#v137-19-oct-2018","title":"v1.3.7 - 19 Oct 2018","text":""},{"location":"CHANGELOG/#enhancements_36","title":"Enhancements","text":"<ul> <li>Autocomplete modules and actions in <code>Class.load()</code> statements</li> <li>Add a new task command (<code>vRO: Push Changes</code>) for pushing only the diff between current branch and origin/master</li> <li>Support specifying different command for windows in the vRO task definitions (.vscode/tasks.json)</li> <li>New Project wizard will reuse the current VSCode window if no other folder is opened.</li> </ul>"},{"location":"CHANGELOG/#known-issues_8","title":"Known Issues","text":"<ul> <li>Cannot build project generated with groupId or artifactId that contain special characters.</li> <li>Cause: The Jasmine tests are unable to compile if the folder hierarchy contains characters that are not allowed in Java packages.</li> <li>Workaround: If a generated project contains special characters in its groupId or artifactId, rename all subfolders in test/ and src/ to not include any non-compatible with the Java package convention characters.</li> </ul>"},{"location":"CHANGELOG/#v136-03-oct-2018","title":"v1.3.6 - 03 Oct 2018","text":""},{"location":"CHANGELOG/#fixes_44","title":"Fixes","text":"<ul> <li>New project functionality works only from the context of existing Build Tools for VMware Aria project. Now projects can be created from an empty VSCode window.</li> </ul>"},{"location":"CHANGELOG/#known-issues_9","title":"Known Issues","text":"<ul> <li>Cannot build project generated with groupId or artifactId that contain special characters.</li> <li>Cause: The Jasmine tests are unable to compile if the folder hierarchy contains characters that are not allowed in Java packages.</li> <li>Workaround: If a generated project contains special characters in its groupId or artifactId, rename all subfolders in test/ and src/ to not include any non-compatible with the Java package convention characters.</li> </ul>"},{"location":"CHANGELOG/#v135-25-sep-2018","title":"v1.3.5 - 25 Sep 2018","text":""},{"location":"CHANGELOG/#enhancements_37","title":"Enhancements","text":"<ul> <li>Include package installer in the toolchain to enable -Pbundle-with-installer. When a package is build with <code>mvn package -Pbundle-with-installer</code> this will produce a zip file with all the dependencies and a bin/ and repo/ folders. The bundle can be installed by unziping it and calling ./bin/installer.</li> <li>Archetype generated projects now work with release.sh immediately, i.e. without further modifying the pom.xml file of the root project. You can still have the SCM remote written in the POM and not specify it every time, but OOTB after you add the project to SCM and add your remote (origin) you can use the <code>-r</code> option of the release.sh script: <code>sh ./release.sh -r $(git remote get-url origin)</code></li> </ul>"},{"location":"CHANGELOG/#fixes_45","title":"Fixes","text":"<ul> <li>vRealize archetype project's install workflow category path contains placeholders</li> </ul>"},{"location":"CHANGELOG/#known-issues_10","title":"Known Issues","text":"<ul> <li>Cannot build project generated with groupId or artifactId that contain special characters.</li> <li>Cause: The Jasmine tests are unable to compile if the folder hierarchy contains characters that are not allowed in Java packages.</li> <li>Workaround: If a generated project contains special characters in its groupId or artifactId, rename all subfolders in test/ and src/ to not include any non-compatible with the Java package convention characters.</li> <li>New project functionality works only from the context of existing Build Tools for VMware Aria project.</li> </ul>"},{"location":"CHANGELOG/#v133-21-sep-2018","title":"v1.3.3 - 21 Sep 2018","text":""},{"location":"CHANGELOG/#fixes_46","title":"Fixes","text":"<ul> <li>vRealize archetype produces a root pom with placeholders</li> </ul>"},{"location":"CHANGELOG/#known-issues_11","title":"Known Issues","text":"<ul> <li>Cannot build project generated with groupId or artifactId that contain special characters.</li> <li>Cause: The Jasmine tests are unable to compile if the folder hierarchy contains characters that are not allowed in Java packages.</li> <li>Workaround: If a generated project contains special characters in its groupId or artifactId, rename all subfolders in test/ and src/ to not include any non-compatible with the Java package convention characters.</li> <li>New project functionality works only from the context of existing Build Tools for VMware Aria project.</li> </ul>"},{"location":"CHANGELOG/#v132-19-sep-2018","title":"v1.3.2 - 19 Sep 2018","text":""},{"location":"CHANGELOG/#fixes_47","title":"Fixes","text":"<ul> <li>Actions with <code>-SNAPSHOT</code> in the version cannot be overridden in vRO version 7.3 or lower</li> </ul>"},{"location":"CHANGELOG/#known-issues_12","title":"Known Issues","text":"<ul> <li>Cannot build project generated with groupId or artifactId that contain special characters.</li> <li>Cause: The Jasmine tests are unable to compile if the folder hierarchy contains characters that are not allowed in Java packages.</li> <li>Workaround: If a generated project contains special characters in its groupId or artifactId, rename all subfolders in test/ and src/ to not include any non-compatible with the Java package convention characters.</li> </ul>"},{"location":"CHANGELOG/#v131-13-sep-2018","title":"v1.3.1 - 13 Sep 2018","text":""},{"location":"CHANGELOG/#fixes_48","title":"Fixes","text":"<ul> <li>The New Project wizard shouldn't ask for Workflows Path when bootstrapping vRA YAML projects</li> <li>vRA YAML projects could not be created because of wrong archetype group ID</li> </ul>"},{"location":"CHANGELOG/#known-issues_13","title":"Known Issues","text":"<ul> <li>Cannot build project generated with groupId or artifactId that contain special characters.</li> <li>Cause: The Jasmine tests are unable to compile if the folder hierarchy contains characters that are not allowed in Java packages.</li> <li>Workaround: If a generated project contains special characters in its groupId or artifactId, rename all subfolders in test/ and src/ to not include any non-compatible with the Java package convention characters.</li> </ul>"},{"location":"CHANGELOG/#v130-11-sep-2018","title":"v1.3.0 - 11 Sep 2018","text":""},{"location":"CHANGELOG/#enhancements_38","title":"Enhancements","text":"<ul> <li><code>vRO: New Project</code> command for bootstrapping vRA and vRO projects</li> <li>New maven archetype for vRA YAML projects</li> <li>Option to edit the profiles in maven's settings.xml file from the Pick Profile dialog (located at the bottom left corner of the status bar)</li> <li>Reduced the number of parameters needed for generating a project when using Maven archetype commands</li> <li>All types of projects<ul> <li>Removed the parameters <code>-Dtop</code>, <code>-Dcompany</code>, <code>-Ddepartment</code>, <code>-Dtopic</code>, <code>-Dname</code></li> <li>Added the parameters <code>-DgroupId</code> and <code>-DartifactId</code></li> </ul> </li> <li>Projects containing workflows<ul> <li>Removed the parameters <code>-DbaseCategory</code>, <code>-DsubCategory</code> and <code>-Dtitle</code></li> <li>Added the parameter <code>-DworkflowsPath</code></li> </ul> </li> <li>Jasmine tests no longer fail with cryptic error when there is an empty/invalid js action file</li> </ul>"},{"location":"CHANGELOG/#fixes_49","title":"Fixes","text":"<ul> <li><code>release.sh</code> cannot release vRA and mixed projects</li> <li>Package installer does not support special characters in the password field</li> </ul>"},{"location":"CHANGELOG/#known-issues_14","title":"Known Issues","text":"<ul> <li>Cannot build project generated with groupId or artifactId that contain special characters.</li> <li>Cause: The Jasmine tests are unable to compile if the folder hierarchy contains characters that are not allowed in Java packages.</li> <li>Workaround: If a generated project contains special characters in its groupId or artifactId, rename all subfolders in test/ and src/ to not include any non-compatible with the Java package convention characters.</li> </ul>"},{"location":"CHANGELOG/#v120-30-jul-2018","title":"v1.2.0 - 30 Jul 2018","text":""},{"location":"CHANGELOG/#enhancements_39","title":"Enhancements","text":"<ul> <li>All components in the toolchain are now capable of using vRA SSO as authentication mechanism towards vRO</li> <li>New options in the Maven profiles for vRO (located in user's settings.xml)</li> <li><code>&lt;vro.auth&gt;vra&lt;/vro.auth&gt;</code> - use vRA SSO authentication</li> <li><code>&lt;vro.auth&gt;basic&lt;/vro.auth&gt;</code> - use Basic authentication</li> <li><code>&lt;vro.tenant&gt;vsphere.local&lt;/vro.tenant&gt;</code> - specify the tenant to be used for SSO authentication</li> <li>There is no longer separate vRO connection configuration for the toolchain Maven plugins and the VSCode extension. All components of the toolchain now use the connection settings defined in the Maven profile at <code>~/.m2/settings.xml</code>. The exact profile to be used by the VSCode extension is provided by a new setting <code>o11n.maven.profile</code>.</li> <li>More build and deploy tasks are available in the <code>Cmd+Shift+B</code> palette in VSCode. The actual command behind each of these tasks can be overwritten by a project local <code>.vscode/tasks.json</code> file (<code>Cmd+Shift+B</code> -&gt; click the cogwheel icon for a task -&gt; change the command in the generated tasks.json)</li> </ul>"},{"location":"CHANGELOG/#migration-steps","title":"Migration Steps","text":"<ul> <li>Since v1.2.0, all mixed projects that have to use vRA SSO authentication, should have the following added to their root pom.xml file. <pre><code>&lt;parent&gt;\n    &lt;groupId&gt;com.vmware.pscoe.o11n&lt;/groupId&gt;\n    &lt;artifactId&gt;base-package&lt;/artifactId&gt;\n    &lt;version&gt;1.2.0&lt;/version&gt;\n&lt;/parent&gt;\n</code></pre></li> <li><code>o11n.maven.profile</code> setting is now required by the VSCode extension</li> </ul>"},{"location":"CHANGELOG/#fixes_50","title":"Fixes","text":"<ul> <li>Print a warning when <code>push</code> is executed for unsupported artifact types, instead of throwing an exception</li> <li>Fix the 'Extension 'vmw-pscoe.o11n-vscode-extension' uses a document selector without scheme.' error visible in vscode when activating the vRO extension</li> </ul>"},{"location":"CHANGELOG/#removed","title":"Removed","text":"<ul> <li>The <code>o11n.server.*</code> configuration properties for the VSCode extension are no longer used. They are replaced by the settings defined <code>o11n.maven.profile</code></li> <li>Removed Maven-based hint collection</li> </ul>"},{"location":"CHANGELOG/#known-issues_15","title":"Known Issues","text":"<ul> <li>Cannot build project generated with groupId or artifactId that contain special characters.</li> <li>Cause: The Jasmine tests are unable to compile if the folder hierarchy contains characters that are not allowed in Java packages.</li> <li>Workaround: If a generated project contains special characters in its groupId or artifactId, rename all subfolders in test/ and src/ to not include any non-compatible with the Java package convention characters.</li> </ul>"},{"location":"CHANGELOG/#v115-19-jul-2018","title":"v1.1.5 - 19 Jul 2018","text":""},{"location":"CHANGELOG/#fixes_51","title":"Fixes","text":"<ul> <li>When trying to pull a package from vRO 7.3 with v1.1.4 of the toolchain, it reports the package is not found even though the package is there.</li> </ul>"},{"location":"CHANGELOG/#v114-17-jul-2018","title":"v1.1.4 - 17 Jul 2018","text":""},{"location":"CHANGELOG/#enhancements_40","title":"Enhancements","text":"<ul> <li>Include empty .o11n directory in the generated vRO projects. Such projects will trigger the vRO extension activation when opened in VSCode</li> <li>Provide the ability to fetch contents from any vRO package by using <code>mvn vro:pull -DpackageName=com.vmware.pscoe.library.ssh</code></li> </ul>"},{"location":"CHANGELOG/#fixes_52","title":"Fixes","text":"<ul> <li>Pull does not work for vRO 7.4</li> <li>Other minor bug fixes and improvements</li> </ul>"},{"location":"CHANGELOG/#v113-13-jun-2018","title":"v1.1.3 - 13 Jun 2018","text":""},{"location":"CHANGELOG/#enhancements_41","title":"Enhancements","text":"<ul> <li>Support pulling and pushing configuration values</li> </ul>"},{"location":"CHANGELOG/#fixes_53","title":"Fixes","text":"<ul> <li>Installer cannot import bundle with both vRO and vRA content</li> <li>Maven-based hint collection fails for mixed project</li> </ul>"},{"location":"CHANGELOG/#v112-23-may-2018","title":"v1.1.2 - 23 May 2018","text":""},{"location":"CHANGELOG/#enhancements_42","title":"Enhancements","text":"<ul> <li>Support component profiles in vRA projects</li> </ul>"},{"location":"CHANGELOG/#v111-14-may-2018","title":"v1.1.1 - 14 May 2018","text":""},{"location":"CHANGELOG/#enhancements_43","title":"Enhancements","text":"<ul> <li>Support encrypted passwords in the active maven profile</li> <li>Include stack trace information in jasmine test failures</li> </ul>"},{"location":"CHANGELOG/#fixes_54","title":"Fixes","text":"<ul> <li>Minor bug fixes and improvements</li> </ul>"},{"location":"CHANGELOG/#v110-03-may-2018","title":"v1.1.0 - 03 May 2018","text":""},{"location":"CHANGELOG/#enhancements_44","title":"Enhancements","text":"<ul> <li>Support pushing content to vRO/vRA without dependencies</li> <li>Support for bulding packages (patches) with only a subset of the project's actions.</li> </ul>"},{"location":"CHANGELOG/#v102-18-apr-2018","title":"v1.0.2 - 18 Apr 2018","text":""},{"location":"CHANGELOG/#enhancements_45","title":"Enhancements","text":"<ul> <li>Support hint collection for dependencies present only on the local machine</li> </ul>"},{"location":"CHANGELOG/#fixes_55","title":"Fixes","text":"<ul> <li>Log4j2 logs an error that configuration is missing when building/testing packages</li> </ul>"},{"location":"CHANGELOG/#v101-13-mar-2018","title":"v1.0.1 - 13 Mar 2018","text":""},{"location":"CHANGELOG/#fixes_56","title":"Fixes","text":"<ul> <li>Cloud Client could not import bundles</li> </ul>"},{"location":"CHANGELOG/#v100-02-mar-2018","title":"v1.0.0 - 02 Mar 2018","text":"<ul> <li>Initial version</li> </ul>"},{"location":"assets/docs/mvn/build-project/","title":"Build project","text":""},{"location":"assets/docs/mvn/build-project/#build-project","title":"Build Project","text":"<p>To build the project, execute the following maven command: <pre><code>mvn clean package\n</code></pre></p>"},{"location":"assets/docs/mvn/bundle-project/","title":"Bundle project","text":""},{"location":"assets/docs/mvn/bundle-project/#bundle-project","title":"Bundle Project","text":"<p>To produce a bundle.zip containing the package and all its dependencies, use: <pre><code>mvn clean package -Pbundle\n</code></pre></p>"},{"location":"assets/docs/mvn/clean-up-content/","title":"Clean up content","text":""},{"location":"assets/docs/mvn/clean-up-content/#clean-up-content","title":"Clean Up Content","text":"<p>To clean up a version of a package from the server use:</p> <ul> <li>Clean up only current package version from the server     <pre><code>mvn vrealize:clean -DcleanUpLastVersion=true -DcleanUpOldVersions=false -DincludeDependencies=false\n</code></pre></li> <li>Clean up current package version from the server and its dependencies. This is a force removal operation.   <pre><code>mvn vrealize:clean -DcleanUpLastVersion=true -DcleanUpOldVersions=false -DincludeDependencies=true\n</code></pre></li> <li>Clean up old package versions and the old version of package dependencies.   <pre><code>mvn vrealize:clean -DcleanUpLastVersion=false -DcleanUpOldVersions=true -DincludeDependencies=true\n</code></pre></li> </ul>"},{"location":"assets/docs/mvn/pull-content/","title":"Pull content","text":""},{"location":"assets/docs/mvn/pull-content/#pull-content","title":"Pull Content","text":"<p>To pull the content on the target environment execute the following maven command: <pre><code>mvn vra:pull -Ptarget-env\n</code></pre></p>"},{"location":"assets/docs/mvn/push-content/","title":"Push content","text":""},{"location":"assets/docs/mvn/push-content/#push-content","title":"Push Content","text":"<p>To push local content to the target environment execute the following maven command: <pre><code>mvn package vrealize:push -Ptarget-env\n</code></pre></p>"},{"location":"assets/docs/mvn/push-content/#include-dependencies","title":"Include Dependencies","text":"<p>By default, the <code>vrealize:push</code> goal will deploy all dependencies of the current project to the target environment. You can control that by the <code>-DincludeDependencies</code> flag. The value is <code>true</code> by default, so you skip the dependencies by executing the following: <pre><code>mvn package vrealize:push -Ptarget-env -DincludeDependencies=false\n</code></pre></p> <p>Note</p> <p>Dependencies will not be deployed if the server has a newer version of the same package deployed. For example, if the current project depends on <code>com.vmware.pscoe.example-2.4.0</code> and on the server there is <code>com.vmware.pscoe.example-2.4.2</code>, the package will not be downgraded. You can force that by adding the <code>`-Dvra.importOldVersions</code> flag: <pre><code>mvn package vrealize:push -Ptarget-env -Dvra.importOldVersions\n</code></pre> The command above will forcefully deploy the exact versions of the dependent packages, downgrading anything it finds on the server.</p>"},{"location":"assets/docs/mvn/push-content/#ignore-certificates","title":"Ignore Certificates","text":"<p>This section describes how to bypass a security feature in development/testing environment. Do not use those flags when targeting production servers. Instead, make sure the certificates have the correct CN, use FQDN to access the servers and add the certificates to Java's key store (i.e. cacerts).</p> Use Maven ProfilesDirectly Pass The Parameters <p>You can ignore certificate errors the certificate is not trusted and the CN does not match the actual hostname by appending the following parameters to the target profile in your maven settings.xml file:</p> <pre><code>...&lt;!--# (1)! --&gt;\n&lt;profiles&gt;\n  ...\n  &lt;profile&gt;\n      &lt;id&gt;target-env&lt;/id&gt;\n      &lt;properties&gt;\n          ...\n          &lt;vrealize.ssl.ignore.hostname&gt;true&lt;/vrealize.ssl.ignore.hostname&gt;\n          &lt;vrealize.ssl.ignore.certificate&gt;true&lt;/vrealize.ssl.ignore.certificate&gt;            \n      &lt;/properties&gt;\n  &lt;/profile&gt;\n&lt;/profiles&gt;\n</code></pre> <ol> <li>The location of settings.xml for macos is ~/.m2 and C:\\Users\\username\\.m2 for windows</li> </ol> <p>You can ignore certificate error, i.e. the certificate is not trusted, by adding the flag <code>-Dvrealize.ssl.ignore.certificate</code>: <pre><code>mvn package vrealize:push -Ptarget-env -Dvrealize.ssl.ignore.certificate\n</code></pre></p> <p>You can ignore certificate hostname error, i.e. the CN does not match the actual hostname, by adding the flag <code>-Dvrealize.ssl.ignore.certificate</code>: <pre><code>mvn package vrealize:push -Ptarget-env -Dvrealize.ssl.ignore.hostname\n</code></pre></p>"},{"location":"assets/docs/mvn/troubleshooting/","title":"Troubleshooting","text":""},{"location":"assets/docs/mvn/troubleshooting/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>If maven error does not contain enough information re-run it with -X debug flag. <pre><code>mvn -X &lt;rest of the command&gt;\n</code></pre></li> <li>Sometimes maven might cache old artifacts. Force fetching new artifacts with -U. Alternatively remove /.m2/repository folder. <pre><code>mvn -U &lt;rest of the command&gt;\n</code></pre>"},{"location":"dev-setup/0.structure/","title":"Structure","text":"<pre><code>Dev Setup [@Kotev]\n    Setup or pre-reqs - mvn, python, node, npm, jdk...\n      git version 2.35.6\n      build 30-May-2023 15:32:41    openjdk version \"1.8.0-internal\"\n      build 30-May-2023 15:32:41    OpenJDK Runtime Environment (build 1.8.0-internal-_2023_04_28_15_42-b00)\n      build 30-May-2023 15:32:41    OpenJDK 64-Bit Server VM (build 25.71-b00, mixed mode)\n      build 30-May-2023 15:32:41    Apache Maven 3.8.6 (84538c9988a25aec085021c365c560670ad80f63)\n      build 30-May-2023 15:32:41    Maven home: /usr/share/maven\n      build 30-May-2023 15:32:41    Java version: 1.8.0-internal, vendor: Oracle Corporation, runtime: /usr/lib/jvm/OpenJDK-1.8.0/jre\n      build 30-May-2023 15:32:41    Default locale: en_US, platform encoding: UTF-8\n      build 30-May-2023 15:32:41    OS name: \"linux\", version: \"5.4.0-126-generic\", arch: \"amd64\", family: \"unix\"\n      build 30-May-2023 15:32:41    node version: v14.17.1\n      build 30-May-2023 15:32:41    npm version: 6.14.13\n      build 30-May-2023 15:32:42    pip 23.1.2 from /usr/lib/python3.10/site-packages/pip (python 3.10)\n      build 30-May-2023 15:32:42    Python 3.10.0\n      build 30-May-2023 15:32:42    PowerShell 7.2.7\n      build 30-May-2023 15:32:42    gpg (GnuPG) 2.2.23\n      build 30-May-2023 15:32:42    OpenSSL 3.0.7 1 Nov 2022 (Library: OpenSSL 3.0.7 1 Nov 2022)\n      build 30-May-2023 15:32:42    xmllint: using libxml version 20912\n      build 30-May-2023 15:32:42    Installed global npm packages:\n      build 30-May-2023 15:32:44    /usr/local/nvm/versions/node/v14.17.1/lib\n      build 30-May-2023 15:32:44    \u251c\u2500\u2500 npm@6.14.13\n      build 30-May-2023 15:32:44    \u2514\u2500\u2500 run-script-os@1.1.6\n    Workstation Setup \n        m2\n        vro keys\n    Online setup from Central\n        ~Link to offline setup\n    vRDT setup - VS Code extension\n        https://github.com/vmware/vrealize-developer-tools/wiki/Using-the-VS-Code-Extension\n</code></pre>"},{"location":"dev-setup/tagged/","title":"Tagged Page","text":"<p>This is the new content of P4 page</p>","tags":["vRA8","vRO8"]},{"location":"enterprise-setup/0.structure/","title":"Structure","text":"<pre><code>Enterprise Setup/Features [@Kotev]\n    Infra Design\n        artifactory\n        git\n        jenkins - CI/CD\n        private mvn repo\n        sonar\n\n    Guide for workers/bamboo setup - CI/CD setup - no GUI setup\n        subset of the dev setup\n        m2 settings.xml\n    Dependency management\n\n    Offline setup\n        Create offline packaging for vRBT usage - NV to create Jira task\n</code></pre>"},{"location":"enterprise-setup/tagged/","title":"Tagged Page","text":"<p>This is the new content of P4 page</p>","tags":["vRA8","vRO8"]},{"location":"getting-started/0.structure/","title":"Structure","text":"<pre><code>Getting Started - very simple e2e tutorial to do the most simple usage [@later]\n    example: https://squidfunk.github.io/mkdocs-material/getting-started/#9x\n    # Platform setup - basic, no artifactory\n    Pre-reqs with out setup of them\n    Using Maven Central\n    Configure mvn setting.xml file\n    Create vRO JS Mixed project\n    Create new basic content - some working example. Offline usage. Usable, with some value.\n    Upload Content - Push\n    Download Content - Pull\n    Package with installer\n    Distribute - Deploy to other env with installer\n        simple properties file\n</code></pre>"},{"location":"getting-started/getting-started/","title":"Getting Started","text":"<p>Here you will find information on how to easily get onboard working with Build Tools for VMware Aria.</p>"},{"location":"getting-started/getting-started/#page-tabs-and-hints","title":"Page Tabs and Hints","text":"<p>Text:</p> MacOSWindows <pre><code>pip install macos\n</code></pre> <pre><code>pip install windows # (1)!\n</code></pre> <ol> <li>Hint Text ...</li> </ol>"},{"location":"usage/maven-archetypes/","title":"Maven Archetypes","text":""},{"location":"usage/products/use-bundle-installer/","title":"Bundle Installer","text":"<p>Before you continue with this section validate that all of the prerequisites are met.</p>"},{"location":"usage/products/use-bundle-installer/#prerequisites","title":"Prerequisites","text":"<ul> <li>Install and Configure Build Tools for VMware Aria System</li> </ul>"},{"location":"usage/products/use-bundle-installer/#use","title":"Use","text":"<p>When you package a vRO/vRA project with the <code>-Pbundle-with-installer</code> Maven profile, you will get an additional artifact <code>***-bundle.zip</code> that contains your project, all its dependencies (both vRA and vRO) plus the bundle installer CLI.</p> <p>You can extract the zip bundle and install all packages on a target environment.</p>"},{"location":"usage/products/use-bundle-installer/#run-the-installer","title":"Run the Installer","text":"<p>Open a terminal and navigate inside the extracted bundle directory. Run the following command: <pre><code>./bin/installer\n</code></pre> The command above will run the <code>installer</code> script in interactive mode and walk you through a set of questions - credentials, flags, etc. Read the questions carefully - the defaults are set according to PS CoE's best practices.</p> <p>At the end of the interaction, before anything is done, you will be prompted to store all the answers to an <code>environment.properties</code> file on disk. This is helpful if you want to use the same answers for different bundles or you'd like to re-run it. All passwords in the file are encoded but you should still make sure that the file is well protected.</p> <p>Following is a sample listing of an <code>environment.properties</code> file. <pre><code># Example properties file\n$ cat environment.properties\nignore_ssl_certificate_verification=true\nignore_ssl_host_verification=true\n\nvro_import_packages=true\nvro_server=vra-l-01a.corp.local\nvro_port=443\nvro_auth=basic\nvro_tenant=vsphere.local\nvro_username=administrator@vsphere.local\nvro_password={PASS}Vk13YXJlMSE\\=    # Same as \"VMware1\\!\"\n\n\nvro_import_old_versions=true\nvro_import_configuration_attribute_values=false\nvro_import_configuration_secure_attribute_values=false\n\nvro_delete_old_versions=true\n\n# Run vRO configuration workflow\nvro_run_workflow=true\nvro_run_workflow_id=1944423533582937823496790834565483423\n# input.json contains JSON where each first class KEY represents \n# the workflow input parameter name and its value will be sent as value\n# Supported types of workflow in/output parameters are string, number, boolean, Array/string\nvro_run_workflow_input_file_path=./input.json\n# output.json contains JSON where each first class KEY represents \n# the workflow output parameter name and its value is a pretty printed value as JSON \nvro_run_workflow_output_file_path=./output.json\nvro_run_workflow_timeout=300\n\nvcd_import_packages=false\n\nvra_import_packages=false\nvra_delete_old_versions=false\n</code></pre></p> <p>To re-use the <code>environment.properties</code> file, you can pass its location as the only argument to the CLI command for running the <code>installer</code> script:</p> <pre><code>$ ./bin/installer ./bin/environment.properties\n</code></pre>"},{"location":"usage/products/use-bundle-installer/#list-of-properties","title":"List of Properties","text":"<p>Following is an exhaustive list of properties that can be used with the <code>installer</code> script. The properties are grouped in sections and some of these properties are available only for specific project types that are available in the bundle (such as vRA, vRO, or vROps content) or specific vRealize Suite product versions (such as vRA7 or vRA8). <pre><code>######################\n### CONFIGURATIONS ###\n######################\n\n### Common connectivity properties ###\nhttp_connection_timeout\nhttp_socket_timeout\nignore_ssl_certificate_verification\nignore_ssl_host_verification\n\n### vRA7 connection properties ###\nvra_server\nvra_port\nvra_tenant\nvra_username\nvra_password\n\n### vRA8 and VCS connection properties ###\nvrang_host\nvrang_csp_host\nvrang_proxy_required\nvrang_proxy  \nvrang_port\nvrang_auth_with_refresh_token\nvrang_refresh_token\nvrang_username\nvrang_password\nvrang_org_id\n# **Note**: The value of the vrang_org_name tag will take precedence over the value of the vrang_org_id tag in case both are present (either trough settings.xml or Installer) during filtering of the cloud accounts during pull action.\nvrang_org_name\nvrang_project.id\nvrang_project_name\nvrang_cloud_proxy_name\nvrang_import_overwrite_mode\n# vrang_vro_integration_name: The value of the &lt;vrang.vro.integration&gt; is used to change the integration endpoint of Workflow Content Sources and other resources that point to that type of integration. If the property is missing a default name \"embedded-VRO\" will be used. Additional info in ticket IAC-419\nvrang_vro_integration_name\n# When pushing content to the vRA, the value of vrang_import_timeout sets the timeout (in milliseconds) for the synchronization of the content source and VRA custom forms. It can be configure via both the settings.xml and installer configuration. Ticket: IAC-440\nvrang_import_timeout\n# When importing content to vRA, the value of vrang_data.collection.delay.seconds sets the timeout (in seconds) for the data collection of the vRO integration in vRA in order for the import of the vRA content that depends on vRO elements to succeed. Effectively, this property sets a wait time on the importing of vRA content.\nvrang_data.collection.delay.seconds\n# Note that the import of vRA8 content also requires the operation property \"vrang_import_overwrite_mode\".\n\n### vRLI connection properties ###\nvrli_server\nvrli_port\nvrli_provider\nvrli_username\nvrli_password\nvrli_vrops_server\nvrli_vrops_server_port\nvrli_vrops_server_user\nvrli_vrops_server_password\nvrli_vrops_server_auth_source\n\n### VCD connection properties ###\nvcd_server\nvcd_port\nvcd_username\nvcd_password\n\n### vRO connection properties ###\nvro_server\nvro_port\nvro_auth\nvro_username\nvro_password\nvro_refresh_token\nvro_tenant\nvro_authHost\nvro_authPort\nvro_proxy\nvro_embedded\n\n### vROps connection properties ###\nvrops_httpHost\nvrops_httpPort\nvrops_restUser\nvrops_restPassword\nvrops_restAuthSource\nvrops_restAuthProvider\nvrops_sshPort\nvrops_sshUsername\nvrops_sshPassword\nvrops_dashboardUser\n\n### SSH server connection properties ###\nssh_server\nssh_port\nssh_username\nssh_password\nssh_directory\n\n##################\n### OPERATIONS ###\n##################\n\n### Flags whether to import certain type of packages in multi type project ###\nvra_import_packages\nvra_ng_import_packages\nvro_import_packages\nvcd_import_packages\nvrops_import_packages\nvrli_import_packages\nssh_import_packages\ncs_import_packages\n#When importing ABX content, we unpack /target/${export}.zip in a temporary folder and unpack all the abx modules then they are iteratively imported.   IAC-512\nabx_import_packages\n\n#### vRO import configurations ####\nvro_import_old_versions\nskip_vro_import_old_versions\nvro_import_configuration_attribute_values\nvro_import_configuration_secure_attribute_values\nvro_delete_old_versions\nvro_delete_last_version\nvro_delete_include_dependencies\n\n#### vRA import configurations ####\nvra_import_overwrite_mode\n# The following vRA configurations are applicable only to vRA 7\nvra_import_old_versions\nskip_vra_import_old_versions\nvra_delete_old_versions\nvra_delete_last_version\nvra_delete_include_dependencies\n\n#### vRO workflow run configuration ####\n# Note that these properties are available for bundles that do not have vRO content as well.\nvro_run_workflow\nvro_run_workflow_id\nvro_run_workflow_input_file_path\nvro_run_workflow_output_file_path\nvro_run_workflow_err_file_path\nvro_run_workflow_timeout\n\n#### vCD import configurations ####\nvcd_delete_old_versions\nvcd_import_old_versions\nskip_vcd_import_old_versions\nvcd_import_overwrite_mode\n</code></pre></p>"},{"location":"usage/products/use-license-plugin/","title":"License plugin","text":"<p>Build Tools for VMware Aria uses license-maven-plugin as a production-ready solution for managing the licenses. The plugin is active on project build if license_data/licenses.properties exists in project's root folder. If activated it will generate license file and license header from templates provided in license_data/.</p>"},{"location":"usage/products/use-license-plugin/#use","title":"Use","text":""},{"location":"usage/products/use-license-plugin/#generate-project-from-an-archetype-with-custom-licensing","title":"Generate project from an archetype with custom licensing","text":""},{"location":"usage/products/use-license-plugin/#you-need-to-use-next-additional-parameters-when-creating-new-project","title":"You need to use next additional parameters when creating new project:","text":"<ul> <li>licenseUrl</li> <li>The parameter will have a default value of null.</li> <li> <p>If it is set, the license URL will be included in the new project pom.xml description.   Also, the content of the URL will be saved as a license template file and will be used on project's build phase.</p> </li> <li> <p>licenseHeader</p> </li> <li>Valid value: Either text or URL.</li> <li>If the param is set: The text, or the content of the provided URL, will be stored in a 'licence_header' template. The content of that file will be used to fill the license header of each code file, during the build of the project.</li> <li> <p>If the param is not set: A default content of a 'licence_header' will be used (\"Copyright [yyyy] [name of copyright owner]\").</p> </li> <li> <p>licenseTechnicalPreview</p> </li> <li>If set: The default VMware Technical Preview license will be used in the generated project. All upper properties are ignored.</li> </ul>"},{"location":"usage/products/use-license-plugin/#examples","title":"Examples","text":"<p>```shell script mvn archetype:generate \\     -DinteractiveMode=false \\     -DarchetypeGroupId=com.vmware.pscoe.o11n.archetypes \\     -DarchetypeArtifactId=package-actions-archetype \\     -DgroupId=local.corp.devops.common \\     -DartifactId=example \\     -DlicenseUrl=https://example.com/license \\     -DlicenseHeader=Example Licence Header <pre><code>```shell script\nmvn archetype:generate \\\n    -DinteractiveMode=false \\\n    -DarchetypeGroupId=com.vmware.pscoe.o11n.archetypes \\\n    -DarchetypeArtifactId=package-actions-archetype \\\n    -DgroupId=local.corp.devops.common \\\n    -DartifactId=example \\\n    -DlicenseTechnicalPreview\n</code></pre></p>"},{"location":"usage/products/use-license-plugin/#generate-licenses","title":"Generate licenses","text":"<p>If the maven-license-plugin is active, it will generate license file and license headers on <code>mvn install</code>. You can manually create 3rd party license list with <code>mvn license:add-third-party -Dlicense.useMissingFile</code>. For more information about usage: click here</p>"},{"location":"usage/products/use-license-plugin/#example-results","title":"Example results","text":"<ul> <li>Example of generated header in js file <pre><code>/*\n * Example Licence\n * %%\n * Copyright (C) 2020 VMWARE\n * %%\n */\n/**\n * Write a brief description of the purpose of the action.\n * @param {number} x - describe each parameter as in JSDoc format.\n * @param {number} y - you can use different vRO types.\n * @returns {number} - describe the return type as well\n */\n(function (x, y) {\n    return x + y;\n});\n</code></pre></li> <li>Generated content in pom.xml <pre><code>...\n\n&lt;description&gt;\n    This package is licensed under https://example.com/license\n&lt;/description&gt;\n\n...\n\n&lt;licenses&gt;\n  &lt;license&gt;\n     &lt;url&gt;https://example.com/license&lt;/url&gt;\n  &lt;/license&gt;\n&lt;/licenses&gt;\n...\n</code></pre></li> </ul>"},{"location":"usage/products/use-license-plugin/#customizing-the-maven-license-plugin","title":"Customizing the maven-license-plugin","text":"<p>You can customize the plugin behaviour by editing its properties in project's pom.xml. Here are the default values if not provided: <pre><code>&lt;properties&gt;\n        &lt;license.licenseName&gt;_license&lt;/license.licenseName&gt;\n        &lt;license.encoding&gt;UTF-8&lt;/license.encoding&gt;\n        &lt;license.licenseResolver&gt;${project.baseUri}license_data&lt;/license.licenseResolver&gt;\n        &lt;license.licenceFile&gt;${basedir}/LICENSE&lt;/license.licenceFile&gt;\n        &lt;license.thirdPartyFilename&gt;THIRD-PARTY&lt;/license.thirdPartyFilename&gt;\n        &lt;license.useMissingFile&gt;true&lt;/license.useMissingFile&gt;\n        &lt;license.organizationName&gt;VMWARE&lt;/license.organizationName&gt;\n        &lt;license.excludedScopes&gt;test&lt;/license.excludedScopes&gt;\n        &lt;license.excludedArtifacts&gt;maven-surefire-plugin&lt;/license.excludedArtifacts&gt;\n        &lt;license.excludeTransitiveDependencies&gt;true&lt;/license.excludeTransitiveDependencies&gt;\n        &lt;license.canUpdateCopyright&gt;true&lt;/license.canUpdateCopyright&gt;\n        &lt;license.canUpdateDescription&gt;true&lt;/license.canUpdateDescription&gt;\n        &lt;license.includes&gt;**/*.js,**/*.ts&lt;/license.includes&gt;\n        &lt;license.excludes&gt;&lt;/license.excludes&gt;\n&lt;/properties&gt;\n</code></pre> For more details see https://www.mojohaus.org/license-maven-plugin</p>"},{"location":"usage/products/use-workstation-abx-project/","title":"ABX Projects","text":"<p>Before you continue with this section validate that all of the prerequisites are met.</p>"},{"location":"usage/products/use-workstation-abx-project/#prerequisites","title":"Prerequisites","text":"<ul> <li>Install and Configure Build Tools for VMware Aria System</li> </ul>"},{"location":"usage/products/use-workstation-abx-project/#use","title":"Use","text":"<p>ABX Project is a development project representation of ABX package content.</p>"},{"location":"usage/products/use-workstation-abx-project/#create-new-abx-project","title":"Create New ABX Project","text":"<p>Build Tools for VMware Aria provides ready to use project templates (maven archetypes).</p> <p>To create a new ABX project from archetype use the following commands for the respective runtime:</p>"},{"location":"usage/products/use-workstation-abx-project/#nodejs","title":"NodeJS","text":"<pre><code>mvn archetype:generate \\\n    -DinteractiveMode=false \\\n    -DarchetypeGroupId=com.vmware.pscoe.polyglot.archetypes \\\n    -DarchetypeArtifactId=package-polyglot-archetype \\\n    -DarchetypeVersion=&lt;iac_for_vrealize_version&gt; \\\n    -DgroupId=local.corp.it.cloud \\\n    -DartifactId=abx \\\n    -Druntime=nodejs \\\n    -Dtype=abx\n</code></pre>"},{"location":"usage/products/use-workstation-abx-project/#python","title":"Python","text":"<pre><code>mvn archetype:generate \\\n    -DinteractiveMode=false \\\n    -DarchetypeGroupId=com.vmware.pscoe.polyglot.archetypes \\\n    -DarchetypeArtifactId=package-polyglot-archetype \\\n    -DarchetypeVersion=&lt;iac_for_vrealize_version&gt; \\\n    -DgroupId=local.corp.it.cloud \\\n    -DartifactId=abx \\\n    -Druntime=python \\\n    -Dtype=abx\n</code></pre>"},{"location":"usage/products/use-workstation-abx-project/#powershell","title":"PowerShell","text":"<pre><code>mvn archetype:generate \\\n    -DinteractiveMode=false \\\n    -DarchetypeGroupId=com.vmware.pscoe.polyglot.archetypes \\\n    -DarchetypeArtifactId=package-polyglot-archetype \\\n    -DarchetypeVersion=&lt;iac_for_vrealize_version&gt; \\\n    -DgroupId=local.corp.it.cloud \\\n    -DartifactId=abx \\\n    -Druntime=powershell \\\n    -Dtype=abx\n</code></pre> <p>Note: The specified  should be minimum 2.11.2 <p>The generated project from the archetype is specific to the runtime, i.e. the src directory will contain .py files  for Python projects, .ts files for NodeJS projects and .ps1 files for PowerShell projects.</p> <p>The result of this command will produce the following project file structure (example for NodeJS): <pre><code>.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 handler.debug.yaml\n\u251c\u2500\u2500 license_data\n\u2502   \u251c\u2500\u2500 licenses.properties\n\u2502   \u2514\u2500\u2500 tp_license\n\u2502       \u251c\u2500\u2500 header.txt\n\u2502       \u2514\u2500\u2500 license.txt\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 pom.xml\n\u251c\u2500\u2500 release.sh\n\u251c\u2500\u2500 src\n\u2502   \u2514\u2500\u2500 handler.ts\n\u2514\u2500\u2500 tsconfig.json\n</code></pre></p>"},{"location":"usage/products/use-workstation-abx-project/#building","title":"Building","text":"<p>You can build any ABX project from sources using Maven:</p> <pre><code>mvn clean package\n</code></pre> <p>This will produce an ABX package with the groupId, artifactId and version specified in the pom. For example: <pre><code>&lt;groupId&gt;local.corp.it.cloud&lt;/groupId&gt;\n&lt;artifactId&gt;abx&lt;/artifactId&gt;\n&lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;\n&lt;packaging&gt;abx&lt;/packaging&gt;\n</code></pre> will result in local.corp.it.cloud.abx-1.0.0-SNAPSHOT.abx generated in the target folder of your project.</p>"},{"location":"usage/products/use-workstation-abx-project/#typescript-project-references-nodejs","title":"TypeScript project references (Node.js)","text":"<p>If you have Node.js ABX projects that must depend on a shared (and locally-developed) Node.js library,  you can use TypeScript project references  to make sure your Node.js library will be built together with the ABX action (and will be included in the produced bundle).</p> <p>For example, you can have the following project structure <pre><code>.\n\u251c\u2500\u2500 my-lib/\n\u2502   \u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 package.json\n\u2502   \u251c\u2500\u2500 tsconfig.json # inherits the base ../tsconfig.json\n\u2502   \u251c\u2500\u2500 pom.xml       # parent should be `com.vmware.pscoe.npm:lib`\n\u251c\u2500\u2500 abx1/\n\u2502   \u251c\u2500\u2500 package.json  # must have `dependencies: [ \"my-lib\": \"file:../my-lib\" ]`\n\u2502   \u251c\u2500\u2500 tsconfig.json # inherits the base ../tsconfig.json\n\u2502   \u251c\u2500\u2500 pom.xml       # parent should be `com.vmware.pscoe.serverless:serverless-project`\n\u251c\u2500\u2500 abx2/\n\u2502   \u251c\u2500\u2500 package.json  # must have `dependencies: [ \"my-lib\": \"file:../my-lib\" ]`\n\u2502   \u251c\u2500\u2500 tsconfig.json # inherits the base ../tsconfig.json\n\u2502   \u251c\u2500\u2500 pom.xml       # parent should be `com.vmware.pscoe.serverless:serverless-project`\n\u251c\u2500\u2500 pom.xml           # 3 modules - my-lib, abx1 and abx2\n\u2514\u2500\u2500 tsconfig.json     # base tsconfig, must have `composite: true` and `paths` proeprty that maps my-lib to its src folder\n\n\n### my-lib/tsconfig.json\n{\n  \"extends\": \"../tsconfig.json\",\n  \"compilerOptions\": {\n    \"baseUrl\": \"./\",\n    \"rootDir\": \"src\",\n    \"outDir\": \"out\"\n  },\n  \"include\": [\"src\"]\n}\n\n### abx1/package.json\n...\n  \"dependencies\": {\n    \"my-lib\": \"file:../my-lib\"\n  },\n...\n\n### abx1/tsconfig.json\n{\n  \"extends\": \"../tsconfig.json\",\n  \"compilerOptions\": {\n    \"baseUrl\": \"./\",\n    \"rootDir\": \"src\",\n    \"outDir\": \"out\"\n  },\n  \"include\": [ \"src\" ],\n  \"references\": [ { \"path\": \"../my-lib\"} ]\n}\n\n### tsconfig.json\n{\n  \"compilerOptions\": {\n    \"baseUrl\": \"./\",\n    \"paths\": { \"my-lib\": [\"my-lib/src\"] },\n    \"composite\": true,\n    ...other compileOptions, shared by all projects inheriting from this tsconfig \n  },\n  \"include\": [],\n}\n\n### pom.xml\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;project&gt;\n  &lt;groupId&gt;local.corp.it.cloud&lt;/groupId&gt;\n  &lt;artifactId&gt;my-abx-project&lt;/artifactId&gt;\n  &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;\n  &lt;packaging&gt;pom&lt;/packaging&gt;\n\n  &lt;modules&gt;\n    &lt;module&gt;my-lib&lt;/module&gt;\n    &lt;module&gt;abx1&lt;/module&gt;\n    &lt;module&gt;abx2&lt;/module&gt;\n  &lt;/modules&gt;\n&lt;/project&gt;\n</code></pre></p> <p>A <code>mvn package</code> command executed in the root folder of a project (with the above structure) will take care of  building the ABX actions and all their project references in the correct order.</p>"},{"location":"usage/products/use-workstation-abx-project/#configuration","title":"Configuration","text":"<p>The ABX project uses the same configuration definition and semantics as the VRA-NG project. Refer to the  configuration definition of the VRA-NG project. The rationale for this is that the ABX service is embedded within the larger vRA8 ecosystem and any application interaction uses unified authentication and authorization methodology, as well as locating the target scope for content distribution, e.g. projects and organizations.</p>"},{"location":"usage/products/use-workstation-abx-project/#pull","title":"Pull","text":"<p>ABX content pulling is not supported yet.</p>"},{"location":"usage/products/use-workstation-abx-project/#push","title":"Push","text":"<p>To deploy the code developed in the local project or checked out from source control to a live server, you can use the <code>vrealize:push</code> command:</p> <p><pre><code>mvn package vrealize:push -Pcorp-env \n</code></pre> This will build the package and deploy it to the environment described in the <code>corp-env</code> profile.</p>"},{"location":"usage/products/use-workstation-abx-project/#release","title":"Release","text":"<p>To release a an ABX action uploaded on a live server, you can use the <code>vrealize:release</code> command:</p> <pre><code>mvn vrealize:release -Pcorp-env -Dvrang.version=1\n</code></pre> <p>The parameter <code>vrang.version</code> is required. The possible values of the parameter are: - <code>vrang.version=auto</code> - use auto-versioning with next version being generated by inferring the version pattern  and generating a new version following the same sequence (refer to the ABX auto-versioning section below).  - <code>vrang.version=project</code> - use the version set in the project. - <code>vrang.version=&lt;version&gt;</code> - use an explicit version.</p>"},{"location":"usage/products/use-workstation-abx-project/#abx-auto-versioning","title":"ABX auto-versioning","text":"<p>When releasing an ABX action to a vRA server that contains previously released action with the same name as the one being released, a new version will be created and released. </p> <p>When creating a new version and the versioning strategy is set to 'auto', the new version will be auto-generated based  on the latest version of the action. The following version formats are supported with their respective incrementing rules:</p> Latest version New version Incrementing rules 1 2 Increment major version 1.0 1.1 Major and minor version - increment the minor 1.0.0 1.0.1 Major, minor and patch version - incrementing the patch 1.0.0-alpha 2020-05-27-10-10-43 Arbitrary version - generate a new date-time based version"},{"location":"usage/products/use-workstation-abx-project/#clean-up","title":"Clean Up","text":"<p>In order to clean up auto-generated content, you can use the following Maven goal: <pre><code>mvn clean\n</code></pre> This will remove the <code>target</code>, <code>out</code> and <code>dist</code> directories of the project.</p>"},{"location":"usage/products/use-workstation-abx-project/#troubleshooting","title":"Troubleshooting","text":"<ul> <li> <p>If Maven error does not contain enough information rerun it with -e debug flag. This will output the stack trace at the point where the error is encountered.  <pre><code>mvn -e &lt;rest of the command&gt;\n</code></pre></p> </li> <li> <p>Additionally, debug information can be really helpful when troubleshooting a particular scenario. In order to  increase the verbosity of the logs, you can use the -X debug flag. <pre><code>mvn -X &lt;rest of the command&gt;\n</code></pre></p> </li> <li> <p>Sometimes Maven might cache old artifacts. Force fetching new artifacts with -U.  Alternatively remove /.m2/repository folder. <pre><code>mvn -U &lt;rest of the command&gt;\n</code></pre>"},{"location":"usage/products/use-workstation-cs-project/","title":"Code Stream Projects","text":"<p>Before you continue with this section validate that all of the prerequisites are met.</p>"},{"location":"usage/products/use-workstation-cs-project/#prerequisites","title":"Prerequisites","text":"<ul> <li>Install and Configure Build Tools for VMware Aria System</li> </ul>"},{"location":"usage/products/use-workstation-cs-project/#use","title":"Use","text":"<p>Code Stream Project is a filesystem representation of Code Stream content into human friendly YAML and/or JSON format. The project consist of content descriptor and content container.</p> <ul> <li>Content Descriptor defines what part Code Stream content will be part of this project.</li> <li>Content Container holds the actual content representation.</li> </ul>"},{"location":"usage/products/use-workstation-cs-project/#cerate-new-code-stream-project","title":"Cerate New Code Stream Project","text":"<p>Build Tools for VMware Aria provides ready to use project templates (maven archetypes).</p> <p>To create a new Code Stream project from archetype use the following command:</p> <pre><code>mvn archetype:generate \\\n    -DinteractiveMode=false \\\n    -DarchetypeGroupId=com.vmware.pscoe.cs.archetypes \\\n    -DarchetypeArtifactId=package-cs-archetype \\\n    -DarchetypeVersion=&lt;iac_for_vrealize_version&gt; \\\n    -DgroupId=local.corp.it.cloud \\\n    -DartifactId=codestream\n</code></pre> <p>Note: The specified  should be minimum 2.8.1 <p>The result of this command will produce the following project file structure:</p> <pre><code>catalog\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 content.yaml\n\u251c\u2500\u2500 pom.xml\n\u251c\u2500\u2500 release.sh\n\u2514\u2500\u2500 src/main/resources\n    \u251c\u2500\u2500 pipelines\n    |   \u2514\u2500\u2500 &lt;pipelineName&gt;.yaml\n    \u251c\u2500\u2500 variable\n    |   \u2514\u2500\u2500 variables.yaml\n    \u251c\u2500\u2500 custom-integrations\n    |   \u2514\u2500\u2500 &lt;custom-integration&gt;.yaml  \n    \u251c\u2500\u2500 git-webhooks\n    |   \u2514\u2500\u2500 &lt;git-webhook&gt;.yaml  \n    \u251c\u2500\u2500 docker-webhook\n    |   \u2514\u2500\u2500 &lt;docker-webhook&gt;.yaml  \n    \u251c\u2500\u2500 gerrit-listeners\n    |   \u2514\u2500\u2500 &lt;gerrit-listener&gt;.yaml  \n    \u251c\u2500\u2500 gerrit-triggers\n    |   \u2514\u2500\u2500 &lt;gerrit-trigger&gt;.yaml  \n    \u2514\u2500\u2500 endpoints\n        \u2514\u2500\u2500 &lt;endpoint&gt;.yaml \n</code></pre> <p>Content Descriptor is implemented by content.yaml file with the following defaults.</p> <p>Note: Code Stream Project supports only content types outlined into content descriptor.</p> <pre><code>---\n# Example describes export of: \n#   \n# Example pipelines:\n# pipeline:\n#  - Pipeline\n\npipeline:\n  - Pipeline Name\nendpoint:\n  - Endpoint Name\ncustom-integration:\n  - Custom Integration Name\nvariable:\n  - Variable name\ngit-webhook:\ndocker-webhook:\ngerrit-listener:\ngerrit-trigger:\n</code></pre> <p>To capture the state of your Code Stream environment simply fill in the names of the content objects you would like to capture and look at the Pull section of this document.</p> <p>Note: Variables are also extracted by scanning endpoints and pipelines </p>"},{"location":"usage/products/use-workstation-cs-project/#building","title":"Building","text":"<p>You can build any Code Stream project from sources using Maven:</p> <pre><code>mvn clean package\n</code></pre> <p>This will produce a CS package with the groupId, artifactId and version specified in the pom. For example:</p> <p><pre><code>&lt;groupId&gt;local.corp.it.cloud&lt;/groupId&gt;\n&lt;artifactId&gt;codestream&lt;/artifactId&gt;\n&lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;\n&lt;packaging&gt;cs&lt;/packaging&gt;\n</code></pre> will result in local.corp.it.cloud.codestream-1.0.0-SNAPSHOT.cs generated in the target folder of your project.</p>"},{"location":"usage/products/use-workstation-cs-project/#pull","title":"Pull","text":"<p>When working on a CS project, you mainly make changes on a live server using the CS Console and then you need to capture those changes in the maven project on your filesystem.</p> <p>To support this use case, the toolchain comes with a custom goal \"cs:pull\". The following command will \"pull\" the content outlined into Content Descriptor file to the current project from a specified server and expand its content in the local filesystem overriding any local content:</p> <pre><code>mvn cs:pull -Dvrang.host=vra-l-01a.corp.local -Dvrang.port=443 -vrang.username={username} -Dvrang.password={password} -Dvrang.project.id={project+id} -Dvrang.refresh.token={refresh+token}\n</code></pre> <p>Note: Extraction works only in the scope of a project. Property project.id or project.name is required! </p> <p>A better approach is to have the different connection properties configured in development environments specified as profiles in the local settings.xml file by adding the following snippet under \"profiles\":</p>"},{"location":"usage/products/use-workstation-cs-project/#example-profile-for-code-stream","title":"Example profile for Code Stream","text":"<pre><code>&lt;profile&gt;\n    &lt;id&gt;corp-dev&lt;/id&gt;\n    &lt;properties&gt;\n        &lt;!--Code Stream Connection--&gt;\n        &lt;vrang.host&gt;api.mgmt.cloud.vmware.com&lt;/vrang.host&gt;\n        &lt;vrang.csp.host&gt;cloud.mgmt.cloud.vmware.com&lt;/vrang.csp.host&gt;\n        &lt;vrang.port&gt;443&lt;/vrang.port&gt;\n        &lt;vrang.username&gt;{username}&lt;/vrang.username&gt;\n        &lt;vrang.password&gt;{password}&lt;/vrang.password&gt;\n        &lt;!--The id of maven element containing the encrypted password and username--&gt;\n        &lt;vrang.serverId&gt;${serverid}&lt;/vrang.serverId&gt;\n        &lt;vrang.refresh.token&gt;{refresh+token}&lt;/vrang.refresh.token&gt;\n        &lt;!--Content scope given by project--&gt;\n        &lt;vrang.project.id&gt;{project+id}&lt;/vrang.project.id&gt;\n        &lt;vrang.project.name&gt;{project+name}&lt;/vrang.project.name&gt;\n        &lt;!--push: update the endpoint cloud proxy in vRA Cloud--&gt;\n        &lt;vrang.cloud.proxy.name&gt;{cloud+proxy+name}&lt;/vrang.cloud.proxy.name&gt;\n        &lt;vrang.org.id&gt;{org+id}&lt;/vrang.org.id&gt;\n        &lt;vrang.org.name&gt;{org+name}&lt;/vrang.org.name&gt;\n\n        &lt;vrang.proxy&gt;{proxy+url}&lt;/vrang.proxy&gt;\n\n    &lt;/properties&gt;\n&lt;/profile&gt;\n</code></pre> <p>Then, you can sync content back to your local sources by simply activating the profile:</p> <pre><code>mvn cs:pull -Pcorp-env\n</code></pre> <p>Note that <code>cs:pull</code> will fail if the content.yaml is empty, or it cannot find some described content on the target vRA server.</p> <p>Note: Check the Authentication section of this document for details on possible authentication methods.</p>"},{"location":"usage/products/use-workstation-cs-project/#push","title":"Push","text":"<p>To deploy the code developed in the local project or checked out from source control to a live server, you can use the <code>vrealize:push</code> command:</p> <pre><code>mvn package vrealize:push -Pcorp-env\n</code></pre> <p>This will build the package and deploy it to the environment described in the <code>corp-env</code> profile.</p> <p>Note: project context is required and in case of vRA Cloud the cloud proxy name used by the endpoints is required</p> <p>Content pushing principles: - Variables are pushed first. Variable project parameter is updated. Variable values are not forced on update and thus configured values remain. If a Secret or Restricted variable is updated (changes type or description) the secret value will be lost. - Custom integrations are pushed with all their versions. If custom integration exists the latest code is updated. Versions already existing in target environment will not be updated (as they may be locked in pipelines). Only new versions will be imported. - Endpoints : Endpoints are imported in configured project. Endpoint cloud proxy is updated.  - Pipelines : Pipelines are imported in configured project. Pipelines status is not changed.</p> <p>Note: Pushing/Pulling content between  vRA Cloud and on premise. vRA Cloud manage cloud proxy configuration. Also some tasks types like (REST, POLL) require you to configure an Agent endpoint. Agent endpoint is direct representation of the cloud proxy.  vRA on premise dos not support creation of agent endpoints and addition of agents in the tasks.</p>"},{"location":"usage/products/use-workstation-cs-project/#authentication","title":"Authentication","text":"<p>Use one of the two possible authentication mechanisms: refresh token or basic auth. When executing command use a profile that has either username/password set or refreshToken parameter.</p> <pre><code>cs:pull -Dvrang.host=vra-l-01a.corp.local -Dvrang.port=443 -Dvrang.project.id={project+id} -Dvrang.refresh.token={refresh+token}\n</code></pre> <pre><code>cs:pull -Dvrang.host=vra-l-01a.corp.local -Dvra.port=443 -Dvrang.project.id={project+id} -Dvrang.username={username} -Dvrang.password={password}\n</code></pre> <p>Note: Basic authentication is performed against an endpoint that communicates with vIDM as authentication backend.</p> <p>Note: Username parameter accepts usernames in the form of <code>&lt;username&gt;</code> as well as <code>&lt;username&gt;@&lt;domain&gt;</code>. When no <code>&lt;domain&gt;</code> is provided, the authentication automatically assumes System Domain. Otherwise the provided domain will be used.  E.g. <code>administrator@corp.local</code> will perform authentication against the <code>corp.local</code> domain, whereas <code>configurationadmin</code> will perfom authentication agains <code>System Domain</code>.</p>"},{"location":"usage/products/use-workstation-cs-project/#include-dependencies","title":"Include Dependencies","text":"<p>By default, the <code>vrealize:push</code> goal will deploy all dependencies of the current project to the target  environment. You can control that by the <code>-DincludeDependencies</code> flag. The value is <code>true</code> by default, so you skip the dependencies by executing the following:</p> <pre><code>mvn package vrealize:push -Pcorp-env -DincludeDependencies=false\n</code></pre> <p>Note that dependencies will not be deployed if the server has a newer version of the same package deployed. For example, if the current project depends on <code>com.vmware.pscoe.example-2.4.0</code> and on the server there is <code>com.vmware.pscoe.example-2.4.2</code>, the package will not be downgraded. You can force that by adding the <code>`-Dvra.importOldVersions</code> flag: <pre><code>mvn package vrealize:push -Pcorp-env -Dvra.importOldVersions\n</code></pre> The command above will forcefully deploy the exact versions of the dependent packages, downgrading anything it finds on the server.</p>"},{"location":"usage/products/use-workstation-cs-project/#ignore-certificate-errors-not-recommended","title":"Ignore Certificate Errors (Not recommended)","text":"<p>This section describes how to bypass a security feature in development/testing environment. Do not use those flags when targeting production servers. Instead, make sure the certificates have the correct CN, use FQDN to access the servers and add the certificates to Java's key store (i.e. cacerts).</p> <p>You can ignore certificate errors, i.e. the certificate is not trusted, by adding the flag <code>-Dvrealize.ssl.ignore.certificate</code>:</p> <pre><code>mvn package vrealize:push -Pcorp-env -Dvrealize.ssl.ignore.certificate\n</code></pre> <p>You can ignore certificate hostname error, i.e. the CN does not match the actual hostname, by adding the flag <code>-Dvrealize.ssl.ignore.certificate</code>: <pre><code>mvn package vrealize:push -Pcorp-env -Dvrealize.ssl.ignore.hostname\n</code></pre></p>"},{"location":"usage/products/use-workstation-cs-project/#bundling","title":"Bundling","text":"<p>To produce a bundle.zip containing the package and all its dependencies, use:</p> <p><pre><code>$ mvn clean deploy -Pbundle\n</code></pre> Refer to Build Tools for VMware Aria/Bundling for more information.</p>"},{"location":"usage/products/use-workstation-cs-project/#clean-up","title":"Clean Up","text":"<p>Clean up is currently not supported</p>"},{"location":"usage/products/use-workstation-cs-project/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>If Maven error does not contain enough information rerun it with -X debug flag.</li> </ul> <p><pre><code>mvn -X &lt;rest of the command&gt;\n</code></pre> * Sometimes Maven might cache old artifacts. Force fetching new artifacts with -U. Alternatively remove /.m2/repository folder. <pre><code>mvn -U &lt;rest of the command&gt;\n</code></pre>"},{"location":"usage/products/use-workstation-vrli-project/","title":"VRLI Projects","text":"<p>Before you continue with this section validate that all of the prerequisites are met.</p>"},{"location":"usage/products/use-workstation-vrli-project/#prerequisites","title":"Prerequisites","text":"<ul> <li>Install and Configure Build Tools for VMware Aria System</li> </ul>"},{"location":"usage/products/use-workstation-vrli-project/#use","title":"Use","text":"<p>VRLI Project is a file system representation of VRLI content into human friendly JSON format. The project consist of content descriptor and content container.</p> <ul> <li>Content Descriptor defines what part VRLI content will be part of this project.</li> <li>Content Container holds the actual content representation.</li> </ul>"},{"location":"usage/products/use-workstation-vrli-project/#cerate-new-vrli-project","title":"Cerate New VRLI Project","text":"<p>Build Tools for VMware Aria provides ready to use project templates (maven archetypes).</p> <p>To create a new VRLI project from archetype use the following command: <pre><code>mvn archetype:generate \\\n    -DinteractiveMode=false \\\n    -DarchetypeGroupId=com.vmware.pscoe.vrli.archetypes \\\n    -DarchetypeArtifactId=package-vrli-archetype \\\n    -DgroupId=org.example \\\n    -DartifactId=sample\n</code></pre></p> <p>Note: The specified  should be minimum 2.5.4 <p>The result of this command will produce the following project file structure: <pre><code>.\n\u251c\u2500\u2500 content.yaml\n\u251c\u2500\u2500 pom.xml\n\u251c\u2500\u2500 release.sh\n\u251c\u2500\u2500 src\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 main\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 resources\n\u2502\u00a0\u00a0         \u2514\u2500\u2500 alerts\n\u2502\u00a0\u00a0             \u2514\u2500\u2500 alert.json\n\u2502\u00a0\u00a0         \u2514\u2500\u2500 content-packs\n\u2502\u00a0\u00a0             \u2514\u2500\u2500 content-pack.json\n</code></pre></p> <p>Content Descriptor is implemented by content.yaml file with the following defaults.</p> <p>Note: VRLI Project supports only content types outlined into content descriptor.</p> <pre><code>---\n# \n# Example describes export of:\n#   Alerts in src/alerts\n#   Content packs in src/content-packs\nalerts:\n  - example*alerts*\n  - *example*\n  - alert 1\n  - alert 2\n  - alert 3\ncontent-pack:\n  - *example*content-packs*\n  - content-pack 1\n  - content-pack 2\n  - content-pack 3\n</code></pre> <p>To capture the state of your VRLI environment simply fill in the names of the content objects you would like to capture and look at the Pull section of this document.</p>"},{"location":"usage/products/use-workstation-vrli-project/#wildcard-support","title":"Wildcard Support","text":"<p>The content file supports wildcard. This means that if a wildcard is present in the asset name, all assets matching the wildcard expression will be exported to the local file system.  The example above shows how to use wildcard in the asset names.</p>"},{"location":"usage/products/use-workstation-vrli-project/#building","title":"Building","text":"<p>You can build any VRLI project from sources using Maven: <pre><code>mvn clean package\n</code></pre></p> <p>This will produce a VRLI package with the groupId, artifactId and version specified in the pom. For example: <pre><code>&lt;groupId&gt;org.example&lt;/groupId&gt;\n&lt;artifactId&gt;sample&lt;/artifactId&gt;\n&lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;\n&lt;packaging&gt;vrli&lt;/packaging&gt;\n</code></pre> will result in org.example.sample-1.0.0-SNAPSHOT.vrli generated in the target folder of your project.</p>"},{"location":"usage/products/use-workstation-vrli-project/#pull","title":"Pull","text":"<p>When working on a VRLI project, you mainly make changes on a live server using the VRLI Console and then you need to capture those changes in the maven project on your filesystem.</p> <p>To support this use case, the toolchain comes with a custom goal \"vrli:pull\". The following command will \"pull\" the content outlined into Content Descriptor file to the current project from a specified server and expand its content in the local filesystem overriding any local content: <pre><code>vrli:pull -Dvrli.host=api.mgmt.cloud.vmware.com -Dvrli.port=9543 -Dvrli.provider=Local\n</code></pre> A better approach is to have the different VRLI development environments specified as profiles in the local settings.xml file by adding the following snippet under \"profiles\": <pre><code>&lt;profile&gt;\n    &lt;id&gt;iac-vrli&lt;/id&gt;\n    &lt;properties&gt;\n        &lt;vrli.host&gt;192.168.1.2&lt;/vrli.host&gt;\n        &lt;vrli.port&gt;9543&lt;/vrli.port&gt;\n        &lt;vrli.username&gt;admin&lt;/vrli.username&gt;\n        &lt;vrli.password&gt;VMware1!&lt;/vrli.password&gt;\n        &lt;vrli.provider&gt;Local&lt;/vrli.provider&gt;\n    &lt;/properties&gt;\n&lt;/profile&gt;\n</code></pre> Then, you can sync content back to your local sources by simply activating the profile: <pre><code>mvn vrli:pull -Piac-vrli\n</code></pre></p> <p>Note that <code>vrli:pull</code> will fail if the content.yaml is empty or it cannot find some of the described content  on the target VRLI server.</p>"},{"location":"usage/products/use-workstation-vrli-project/#push","title":"Push","text":"<p>To deploy the code developed in the local project or checked out from source control to a live server, you can use the <code>vrealize:push</code> command: <pre><code>mvn package vrealize:push -Piac-vrli\n</code></pre> This will build the package and deploy it to the environment described in the <code>iac-vrli</code> profile. There are a few additional options.</p>"},{"location":"usage/products/use-workstation-vrli-project/#authentication","title":"Authentication","text":"<p>When executing command use a profile that has username/password and provider set. </p> <pre><code>vrli:pull -Dvrli.host=api.mgmt.cloud.vmware.com -Dvrli.port=9543 -Dvrli.provider=Local -Dvrli.username={username} -Dvrli.password={password}\n</code></pre> <p>Note that you need to specify the authentication provider used to connect to the VRLI server in the <code>vrli.provider</code> parameter. Currently supported providers are Local, active directory and VIDM. In this example the \"Local\" provider is used.</p>"},{"location":"usage/products/use-workstation-vrli-project/#include-dependencies","title":"Include Dependencies","text":"<p>By default, the <code>vrealize:push</code> goal will deploy all dependencies of the current project to the target  environment. You can control that by the <code>-DincludeDependencies</code> flag. The value is <code>true</code> by default, so you skip the dependencies by executing the following: <pre><code>mvn package vrealize:push -Piac-vrli -DincludeDependencies=false\n</code></pre></p>"},{"location":"usage/products/use-workstation-vrli-project/#ignore-certificate-errors-not-recommended","title":"Ignore Certificate Errors (Not recommended)","text":"<p>This section describes how to bypass a security feature in development/testing environment. Do not use those flags when targeting production servers. Instead, make sure the certificates have the correct CN, use FQDN to access the servers and add the certificates to Java's key store (i.e. cacerts).</p> <p>You can ignore certificate errors, i.e. the certificate is not trusted, by adding the flag <code>-Dvrealize.ssl.ignore.certificate</code>: <pre><code>mvn package vrealize:push -Piac-vrli -Dvrealize.ssl.ignore.certificate\n</code></pre></p> <p>You can ignore certificate hostname error, i.e. the CN does not match the actual hostname, by adding the flag <code>-Dvrealize.ssl.ignore.certificate</code>: <pre><code>mvn package vrealize:push -Piac-vrli -Dvrealize.ssl.ignore.hostname\n</code></pre></p> <p>You can also combine the two options above.</p> <p>The other option is to set the flags in your Maven's settings.xml file for a specific development environment. <pre><code>&lt;profile&gt;\n    &lt;id&gt;iac-vrli&lt;/id&gt;\n    &lt;properties&gt;\n        &lt;vrealize.ssl.ignore.hostname&gt;true&lt;/vrealize.ssl.ignore.hostname&gt;\n        &lt;vrealize.ssl.ignore.certificate&gt;true&lt;/vrealize.ssl.ignore.certificate&gt;\n\n        &lt;vrli.host&gt;192.168.1.2&lt;/vrli.host&gt;\n        &lt;vrli.port&gt;9543&lt;/vrli.port&gt;\n        &lt;vrli.username&gt;admin&lt;/vrli.username&gt;\n        &lt;vrli.password&gt;VMware1!&lt;/vrli.password&gt;\n        &lt;vrli.provider&gt;Local&lt;/vrli.provider&gt;\n    &lt;/properties&gt;\n&lt;/profile&gt;\n</code></pre></p>"},{"location":"usage/products/use-workstation-vrli-project/#bundling","title":"Bundling","text":"<p>To produce a bundle.zip containing the package and all its dependencies, use: <pre><code>$ mvn clean deploy -Pbundle\n</code></pre> Refer to Build Tools for VMware Aria/Bundling for more information.</p>"},{"location":"usage/products/use-workstation-vrli-project/#clean-up","title":"Clean Up","text":"<p>Clean up is currently not supported</p>"},{"location":"usage/products/use-workstation-vrli-project/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>If Maven error does not contain enough information rerun it with -X debug flag. <pre><code>mvn -X &lt;rest of the command&gt;\n</code></pre></li> <li>Sometimes Maven might cache old artifacts. Force fetching new artifacts with -U. Alternatively remove /.m2/repository folder. <pre><code>mvn -U &lt;rest of the command&gt;\n</code></pre>"},{"location":"usage/products/use-workstation-vro-project/","title":"vRO Projects","text":"<p>Before you continue with this section validate that all of the prerequisites are met.</p>"},{"location":"usage/products/use-workstation-vro-project/#prerequisites","title":"Prerequisites","text":"<ul> <li>Install and Configure Build Tools for VMware Aria System</li> </ul>"},{"location":"usage/products/use-workstation-vro-project/#use","title":"Use","text":""},{"location":"usage/products/use-workstation-vro-project/#crate-new-vro-project","title":"Crate New vRO Project","text":"<p>You start by bootstraping a new project using one of the provided archetypes:</p>"},{"location":"usage/products/use-workstation-vro-project/#js-based-actions-only-project","title":"JS-Based Actions-Only Project","text":"<p>This project contains only actions as *.js files. It does not handle an end-to-end functionality, but is an excellent choice as a dependency for xml-based projects containing workflows, configurations and resource elements.</p> <p>To create a new project of this type, you use the following command:</p> <pre><code>mvn archetype:generate \\\n    -DinteractiveMode=false \\\n    -DarchetypeGroupId=com.vmware.pscoe.o11n.archetypes \\\n    -DarchetypeArtifactId=package-actions-archetype \\\n    -DarchetypeVersion=&lt;iac_for_vrealize_version&gt; \\\n    -DgroupId=local.corp.it.cloud \\\n    -DartifactId=dns\n</code></pre> <p>This will generate the following project file structure:</p> <pre><code>dns\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 pom.xml\n\u251c\u2500\u2500 release.sh\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 main\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 resources\n    \u2502\u00a0\u00a0     \u251c\u2500\u2500 local\n    \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 corp\n    \u2502\u00a0\u00a0     \u2502\u00a0\u00a0     \u2514\u2500\u2500 it\n    \u2502\u00a0\u00a0     \u2502\u00a0\u00a0         \u2514\u2500\u2500 cloud\n    \u2502\u00a0\u00a0     \u2502\u00a0\u00a0             \u2514\u2500\u2500 dns\n    \u2502\u00a0\u00a0     \u2502\u00a0\u00a0                 \u2514\u2500\u2500 sample.js\n    \u2502\u00a0\u00a0     \u251c\u2500\u2500 log4j.xml\n    \u2502\u00a0\u00a0     \u2514\u2500\u2500 log4j2.xml\n    \u2514\u2500\u2500 test\n        \u2514\u2500\u2500 resources\n            \u2514\u2500\u2500 local\n                \u2514\u2500\u2500 corp\n                    \u2514\u2500\u2500 it\n                        \u2514\u2500\u2500 cloud\n                            \u2514\u2500\u2500 dns\n                                \u2514\u2500\u2500 SampleTests.js\n</code></pre> <p>You can delete the example action and test and start developing your code.</p> <p>Every *.js file that follows the convention (see sample.js for reference) will be compiled into a vRO action where the action name is the name of the file (e.g. sample) and the module (namespace) is the path under src/main/resources (e.g. \"local.corp.it.cloud.dns\").</p> <p>Actions in vRO are essentially functions that you can call by using System.getModule. In plain JavaScript, we model actions in the same way. Therefore, in the JS format it is required to have a single root function that represents the action. Since JavaScript is dynamically typed and vRO isn't, it is recommended to describe the parameter types and the return value type in JsDoc (see sample.js for reference). If you omit the JsDoc all types will be assumed to be be \"Any\".</p>"},{"location":"usage/products/use-workstation-vro-project/#xml-based-project","title":"Xml-Based Project","text":"<p>This is the standard vRO project that can cover all use cases. It contains workflows, resource elements, configuration elements, actions and policies and can have dependencies to any other vRO project type.</p> <p>To create a new project of this type, you use the following command:</p> <pre><code>mvn archetype:generate \\\n    -DinteractiveMode=false \\\n    -DarchetypeGroupId=com.vmware.pscoe.o11n.archetypes \\\n    -DarchetypeArtifactId=package-xml-archetype \\\n    -DarchetypeVersion=&lt;iac_for_vrealize_version&gt; \\\n    -DgroupId=local.corp.it.cloud \\\n    -DartifactId=dns \\\n    -DworkflowsPath=Corp/Cloud/Util\n</code></pre> <p>This will produce the following project file structure:</p> <pre><code>util\n\u251c\u2500\u2500 pom.xml\n\u251c\u2500\u2500 release.sh\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 main\n        \u2514\u2500\u2500 resources\n            \u251c\u2500\u2500 Workflow\n            \u2502\u00a0\u00a0 \u2514\u2500\u2500 Corp\n            \u2502\u00a0\u00a0     \u2514\u2500\u2500 Cloud\n            \u2502\u00a0\u00a0         \u2514\u2500\u2500 Util\n            \u2502\u00a0\u00a0             \u251c\u2500\u2500 Install.element_info.xml\n            \u2502\u00a0\u00a0             \u2514\u2500\u2500 Install.xml\n            \u2514\u2500\u2500 dunes-meta-inf.xml\n</code></pre> <p>You can delete the example elements.</p> <p>You need to build and import the package in vRO and start developing your code there. Make sure you sync the content from the vRO to your local file system regularly and commit your changes to SCM.</p> <p>The Install workflow is the recommended way of automating the configuration/reconfiguration of your solution, so you can use the workflow generated by the archetype as a starting point and develop your installation code from there.</p>"},{"location":"usage/products/use-workstation-vro-project/#mixed-project","title":"Mixed Project","text":"<p>Mixed project acts as virtual project combining the both JS-Based Actions-Only and XML-based projects under single unified structure. Such project type is useful for initial onboarding of existing vRO code into the toolchain or when there is no need for XML-based and JS-Based Actions-Only projects to have separate lifecycle.</p> <p>To create a new project of this type, you use the following command:</p> <pre><code>mvn archetype:generate \\\n    -DinteractiveMode=false \\\n    -DarchetypeGroupId=com.vmware.pscoe.o11n.archetypes \\\n    -DarchetypeArtifactId=package-mixed-archetype \\\n    -DarchetypeVersion=&lt;iac_for_vrealize_version&gt; \\\n    -DgroupId=local.corp.it.cloud \\\n    -DartifactId=services \\\n    -DworkflowsPath=Corp/Cloud/Services\n</code></pre> <p>This will produce the following project file structure:</p> <pre><code>services\n\u251c\u2500\u2500 actions\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 pom.xml\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 src\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 main\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 resources\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0     \u251c\u2500\u2500 local\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 corp\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0     \u2502\u00a0\u00a0     \u2514\u2500\u2500 it\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0     \u2502\u00a0\u00a0         \u2514\u2500\u2500 cloud\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0     \u2502\u00a0\u00a0             \u2514\u2500\u2500 services\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0     \u2502\u00a0\u00a0                 \u2514\u2500\u2500 sample.js\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0     \u251c\u2500\u2500 log4j.xml\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0     \u2514\u2500\u2500 log4j2.xml\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 test\n\u2502\u00a0\u00a0         \u2514\u2500\u2500 resources\n\u2502\u00a0\u00a0             \u2514\u2500\u2500 local\n\u2502\u00a0\u00a0                 \u2514\u2500\u2500 corp\n\u2502\u00a0\u00a0                     \u2514\u2500\u2500 it\n\u2502\u00a0\u00a0                         \u2514\u2500\u2500 cloud\n\u2502\u00a0\u00a0                             \u2514\u2500\u2500 services\n\u2502\u00a0\u00a0                                 \u2514\u2500\u2500 SampleTests.js\n\u251c\u2500\u2500 pom.xml\n\u251c\u2500\u2500 release.sh\n\u2514\u2500\u2500 workflows\n    \u251c\u2500\u2500 pom.xml\n    \u2514\u2500\u2500 src\n        \u2514\u2500\u2500 main\n            \u2514\u2500\u2500 resources\n                \u251c\u2500\u2500 Workflow\n                \u2502\u00a0\u00a0 \u2514\u2500\u2500 Corp\n                \u2502\u00a0\u00a0     \u2514\u2500\u2500 Cloud\n                \u2502\u00a0\u00a0         \u2514\u2500\u2500 Services\n                \u2502\u00a0\u00a0             \u251c\u2500\u2500 Install.element_info.xml\n                \u2502\u00a0\u00a0             \u2514\u2500\u2500 Install.xml\n                \u2514\u2500\u2500 dunes-meta-inf.xml\n</code></pre>"},{"location":"usage/products/use-workstation-vro-project/#typescript-based-project","title":"TypeScript-Based Project","text":"<p>EXPERIMENTAL</p> <p>This project contains actions as *.ts, workflows as *.wf.ts, configuration elements as *.conf.ts and resource files.</p> <p>To create a new project of this type, you use the following command:</p> <pre><code>mvn archetype:generate \\\n    -DinteractiveMode=false \\\n    -DarchetypeGroupId=com.vmware.pscoe.o11n.archetypes \\\n    -DarchetypeArtifactId=package-typescript-archetype \\\n    -DarchetypeVersion=&lt;iac_for_vrealize_version&gt; \\\n    -DgroupId=local.corp.it.cloud \\\n    -DartifactId=demo\n</code></pre> <p>This will generate the following project file structure:</p> <pre><code>demo\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 pom.xml\n\u251c\u2500\u2500 release.sh\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 actions\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 actionSample.js\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 sample.test.ts\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 sample.ts\n    \u251c\u2500\u2500 elements\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 config\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 sample.conf.ts\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 sample2.conf.yaml\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 resource\n    \u2502\u00a0\u00a0     \u251c\u2500\u2500 sample.txt\n    \u2502       \u251c\u2500\u2500 sample2.json\n    \u2502       \u251c\u2500\u2500 sample2.json.element_info.json\n    \u2502       \u251c\u2500\u2500 sample3.xml\n    \u2502       \u251c\u2500\u2500 sample3.xml.element_info.json\n    \u2502       \u2514\u2500\u2500 sample4.son\n    \u251c\u2500\u2500 policies\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 sample.pl.ts\n    \u251c\u2500\u2500 types\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 sample.d.ts\n    \u2514\u2500\u2500 workflows\n            \u251c\u2500\u2500 sample.wf.ts\n            \u2514\u2500\u2500 sample.wf.form.json\n</code></pre> <p>You can delete the examples and start developing your code.</p> <p>Every *.ts file will be compiled into one of the corresponding types.</p> <ul> <li>Actions (sample.ts) will be compiled into the module &lt; groupId &gt;.&lt; artifactId &gt;. <li>Tests (sample.test.ts) will not be added to the vRO package, but will be compiled into Javascript and triggered the same way as for the JS based projects</li> <li>Configuration Elements (sample.conf.ts), Policies (sample.pl.ts), Workflows (sample.wf.ts) will be placed and named depending on their deocrator \"path\" and \"name\" properties. Resource Elements placement is depending on *.element_info.json descriptor. If those are missing form the decorator  description they are defined under the &lt; artifactId &gt;. category <li>VRA 8 workflow form (sample.wf.form.json) will be attached to its corresponding Workflow (sample.wf.ts)</li> <li>Types (sample.d.ts) will not be added to the final package. </li>"},{"location":"usage/products/use-workstation-vro-project/#additional-options","title":"Additional Options","text":"<p>If in the workflow's XML file the description is populated with the one or more of the following placeholders: $CUSTOMER, $PROJECT or $RELEASE then during pushing of the workflow to VRO those values will be replaced automatically with following values (according to the values in the project's pom.xml):</p> <ol> <li>$CUSTOMER - extracted from the project's name (i.e. from customer01.project.name -&gt; customer01), pom.xml tag: <code>xml &lt;artifactId&gt;customer01.project.name&lt;/artifactId&gt;.</code></li> <li>$PROJECT - extracted from the project's name (i.e. from customer01.project.name -&gt; project.name), pom.xml tag: <code>xml &lt;artifactId&gt;customer01.project.name&lt;/artifactId&gt;.</code></li> <li>$RELEASE - extracted from the project's version (i.e. 1.0.0-SNAPSHOT -&gt; 1.0.0) pom.xml tag: <code>xml &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;</code></li> </ol>"},{"location":"usage/products/use-workstation-vro-project/#examples","title":"Examples","text":""},{"location":"usage/products/use-workstation-vro-project/#configuration-element","title":"Configuration Element","text":"<pre><code>@Configuration({\n    name: \"Sample Config\",\n    path: \"MyOrg/MyProject\",\n    attributes: {\n        field1: { type: \"sring\" },\n        field2: {\n            type: \"SecureString\",\n            description: \"It is secured\"\n        },\n        field3: {\n            type: \"string\",\n            value: \"defaultValue\"\n        }\n    }\n\n})\nclass SampleConfig {\n    field4: string\n}\n</code></pre>"},{"location":"usage/products/use-workstation-vro-project/#workflow","title":"Workflow","text":"<pre><code>import { Workflow, Out } from \"tsc-annotations\";\n\n@Workflow({\n  id: \"\",\n  name: \"Sample Workflow\",\n  path: \"MyOrg/MyProject\",\n  description: \"Sample workflow description\",\n  attributes: {},\n  input: {\n    foo: { type: \"string\" },\n    bar: { type: \"string\" },\n  },\n  output: {\n    result: { type: \"Any\" },\n  },\n  presentation: \"\",\n})\nclass SampleWorkflow {\n  public install(foo: string, bar: string, @Out result: any): void {\n    System.log(`foo=${foo}, bar=${bar}`);\n    result = \"result value\";\n  }\n}\n</code></pre>"},{"location":"usage/products/use-workstation-vro-project/#class","title":"Class","text":"<pre><code>export class SampleClass {\n  public sum(x: number, y: number) {\n    return x + y;\n  }\n}\n</code></pre>"},{"location":"usage/products/use-workstation-vro-project/#test","title":"Test","text":"<pre><code>import { SampleClass } from \"./sample\";\n\ndescribe(\"Tests\", () =&gt; {\n  it(\"should sum two numbers\", () =&gt; {\n    expect(new SampleClass().sum(1, 2)).toBe(3);\n  });\n});\n</code></pre>"},{"location":"usage/products/use-workstation-vro-project/#action","title":"Action","text":"<pre><code>import { LoggerFactory } from \"./LoggerFactory\";\n/**\n * Sample Action description\n *\n * @param name string\n * @param options any\n *\n * @return Any\n */\n(function getLogger(name: string, options?: any) {\n  return new LoggerFactory().getLogger(name, options);\n});\n</code></pre>"},{"location":"usage/products/use-workstation-vro-project/#policy-template","title":"Policy Template","text":"<pre><code>@PolicyTemplate({\n    name: \"Sample Policy\",\n    path: \"MyOrg/MyProject\",\n    type: \"AMQP:Subscription\"\n})\nclass SamplePolicy {\n    onMessage(self: AMQPSubscription, event: any) {\n        let message = self.retrieveMessage(event);\n        System.log(`Received message ${message.bodyAsText}`);\n    }\n}\n</code></pre>"},{"location":"usage/products/use-workstation-vro-project/#unit-testing","title":"Unit Testing","text":"<p>If you use js-based actions-only project, you can create unit tests to help you develop and verify your code.</p> <p>The tests should be written using Jasmine, as one would do with any other JavaScript code. The only difference is that there are a number of vRO scriptable objects (e.g. ConfigurationElement) that are not present in the enulated vRO scripting context. You will have to mock those by overriding variables in the global scope.</p> <p>For this project type, there is a Jasmine-JUnit adapter that is already configured. You place your tests under src/test following the same folder structure as with the actions (e.g. src/test/local/corp/it/cloud/dns).</p> <p>An example test file is shown bellow. It tests a custom action for working with configuration elements and for that it overrides the Server and the ConfigurationElement scriptable object classes in the context:</p> <pre><code>describe(\"Something\", function() {\n    ConfigurationElement = function (name, attributes) {\n        this.attributes = attributes;\n        this.configurationElementCategory = null;\n        this.description = \"\";\n        this.name = name;\n        this.version = \"0.0.0\";\n        this.getAttributeWithKey = function getAttributeWithKey (key) {\n            return this.attributes[key];\n        };\n        this.removeAttributeWithKey = function removeAttributeWithKey (key) {\n            delete this.attributes[key];\n        };\n        this.setAttributeWithKey = function setAttributeWithKey (key, value) {\n            this.attributes[key] = {key: key, value: value};\n        };\n\n        this.reload = function() {\n            // all up-to-date\n        };\n    };\n    Server = {\n        query: jasmine.createSpy('query').and.returnValue(new ConfigurationElement(\"test\"))\n    }\n\n    it(\"should set attribute\", function() {\n        System.getModule(\"local.corp.it.cloud.dns\").setAttribute(\"Corp/Cloud/Util/test\", \"value\", 1);\n        var value = System.getModule(\"local.corp.it.cloud.dns\").getAttribute(\"Corp/Cloud/Util/test\", \"value\");\n        expect(value).toBe(1);\n    });\n    it(\"should ...\", function() {\n      ...\n    });\n});\n</code></pre> <p>Note that all tests in a single file are executed in a single context, i.e. any changes to the global scope are persisted. However, different js files are executed in separate scripting contexts.</p> <p>The Jasmine-JUnit adapter is part of the standard Maven lifecycle's testing phase, therefore tests will be discovered and executed every time you build your project. However, you can trigger tests explicitly:</p> <pre><code>mvn test # This will run all tests in the project without packaging it.\nmvn test -Dtest=SomethingTest # This will run only tests in the SomethingTest.js file.\n</code></pre>"},{"location":"usage/products/use-workstation-vro-project/#building","title":"Building","text":"<p>You can build any vRO project from sources using Maven:</p> <pre><code>mvn clean package\n</code></pre> <p>This will produce a vRO package with the groupId, artifactId and version specified in the pom. For example:</p> <pre><code>&lt;groupId&gt;local.corp.it.cloud&lt;/groupId&gt;\n&lt;artifactId&gt;dns&lt;/artifactId&gt;\n&lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;\n&lt;packaging&gt;package&lt;/packaging&gt;\n</code></pre> <p>will result in local.corp.it.cloud.dns-1.0.0-SNAPSHOT.package generated in the target folder of your project.</p> <p>In case you want to produce a bundle.zip containing the package and all its dependencies, you use:</p> <pre><code>mvn clean pacakge -Pbundle\n</code></pre> <p>In case you want to include only a subset of the project tree you can use the \"include\" property specifying list of project relative locations to the files to include during packaging. Currently suported for both JS and XML type projects as well as for TS files producing actions (i.e. base .ts files).</p> <pre><code>mvn clean package -Dinclude=\"src/main/resources/com/vmware/package/action1.js,src/main/resources/com/vmware/package/action1.js\"\n</code></pre> <p>This is useful in the case when multiple developers are working against same vRO and in order to limit the overlapping content updates. This way you can also get latest changes according to git diff:</p> <pre><code>mvn clean package -Dinclude=\"$(git diff --name-only origin/master | tr '\\n' ',')\"\n</code></pre>"},{"location":"usage/products/use-workstation-vro-project/#pull","title":"Pull","text":"<p>When working on a vRO project, sometimes you might need to make changes on a live server using the vRO Client, e.g. when working on workflows.</p> <p>Although this is applicable for both xml and js-based projects, it is more suitable for xml-based ones where you have the need to work on workflows, configuration and resource elements.</p> <p>To support this use case, the toolchain comes with a custom goal \"vro:pull\". The following command will \"pull\" the package corresponding to the current project from a specified server and expand its content in the local filesystem overriding any local content:</p> <pre><code>vro:pull -Dvro.host=10.29.26.18 -Dvro.port=8281 -Dvro.username=administrator@vsphere.local -Dvro.password=***\n</code></pre> <p>Sometimes you want to pull the content of another package into your project. This can be achieved by providing the remote package name as parameter.</p> <pre><code>vro:pull -DpackageName=com.vmware.pscoe.library.ssh -Dvro.host=10.29.26.18 -Dvro.port=8281 -Dvro.username=administrator@vsphere.local -Dvro.password=***\n</code></pre> <p>A better approach is to have the different vRO/vRA development environments specified as profiles in the local settings.xml file by adding the following snippet under \"profiles\":</p> <pre><code>&lt;servers&gt;\n    &lt;server&gt;\n        &lt;username&gt;administrator@vsphere.local&lt;/username&gt;\n        &lt;password&gt;{native+maven+encrypted+pass}&lt;/password&gt;\n        &lt;id&gt;corp-dev-vro&lt;/id&gt;\n    &lt;/server&gt;\n&lt;/servers&gt;\n....\n&lt;profile&gt;\n    &lt;id&gt;corp-dev&lt;/id&gt;\n    &lt;properties&gt;\n        &lt;!--vRO Connection--&gt;\n        &lt;vro.host&gt;10.29.26.18&lt;/vro.host&gt;\n        &lt;vro.port&gt;8281&lt;/vro.port&gt;\n        &lt;vro.serverId&gt;corp-dev-vro&lt;/vro.serverId&gt;\n        &lt;vro.auth&gt;vra&lt;/vro.auth&gt;\n        &lt;vro.tenant&gt;vsphere.local&lt;/vro.tenant&gt;\n    &lt;/properties&gt;\n&lt;/profile&gt;\n</code></pre> <p>Then, you can sync content back to your local sources by simply activating the profile:</p> <pre><code>mvn vro:pull -Pcorp-env\n</code></pre>"},{"location":"usage/products/use-workstation-vro-project/#push","title":"Push","text":"<p>To deploy the code developed in the local project or checked out from source control to a live server, you can use the <code>vrealize:push</code> command:</p> <pre><code>mvn package vrealize:push -Pcorp-env\n</code></pre> <p>This will build the package and deploy it to the environment described in the <code>corp-env</code> profile. There are a few additional options.</p>"},{"location":"usage/products/use-workstation-vro-project/#include-dependencies","title":"Include Dependencies","text":"<p>By default, the <code>vrealize:push</code> goal will deploy all dependencies of the current project to the target environment. You can control that by the <code>-DincludeDependencies</code> flag. The value is <code>true</code> by default, so you skip the dependencies by executing the following:</p> <pre><code>mvn package vrealize:push -Pcorp-env -DincludeDependencies=false\n</code></pre> <p>Note that dependencies will not be deployed if the server has a newer version of the same package deployed. For example, if the current project depends on <code>com.vmware.pscoe.example-2.4.0</code> and on the server there is <code>com.vmware.pscoe.example-2.4.2</code>, the package will not be downgraded. You can force that by adding the <code>`-Dvro.importOldVersions</code> flag:</p> <pre><code>mvn package vrealize:push -Pcorp-env -Dvro.importOldVersions\n</code></pre> <p>The command above will forcefully deploy the exact versions of the dependent packages, downgrading anything it finds on the server.</p>"},{"location":"usage/products/use-workstation-vro-project/#push-only-the-files-that-changes-from-one-commit-to-another","title":"Push only the files that changes from one commit to another","text":"<p>The <code>vrealize:push</code> goal will deploy all dependencies of the current project to the target environment. You can control what files need to be refreshed wit the <code>-Dfiles</code> flag. The value of this property is a list with the names  of the files that change from one commit to another.  </p> <p>In Windows PowerShell console: <pre><code> mvn clean compile package vrealize:push -D\"files\"=$($((git diff --name-only master | where{($_ -match \".*js*\") -or ($_ -match \".*ts*\")} | get-item | select -ExpandProperty basename) -join ',')))\n</code></pre></p> <p>In Windows Git Bash console: <pre><code> mvn clean compile package vrealize:push -D\"files\"=$(git diff --name-only origin/master | grep -E -i \"\\.(js|ts)$\" | xargs -I {} basename {} | tr '\\n' ',')\n</code></pre></p> <p>Other approach should be just import some independt files. To do this the parameter \"files\" needs to be populated. In Windows PowerShell console: <pre><code> mvn clean compile package vrealize:push -D\"files\"=BearerTokenFetcher.ts,ImailBox.ts,Test.js\n</code></pre></p> <p>In Windows Git Bash console: <pre><code> mvn clean compile package vrealize:push -D\"files\"=BearerTokenFetcher.ts,ImailBox.ts,Test.js\n</code></pre></p>"},{"location":"usage/products/use-workstation-vro-project/#ignore-certificate-errors-not-recommended","title":"Ignore Certificate Errors (Not recommended)","text":"<p>This section describes how to bypass a security feature in development/testing environment. Do not use those flags when targeting production servers. Instead, make sure the certificates have the correct CN, use FQDN to access the servers and add the certificates to Java's key store (i.e. cacerts).</p> <p>You can ignore certificate errors, i.e. the certificate is not trusted, by adding the flag <code>-Dvrealize.ssl.ignore.certificate</code>:</p> <pre><code>mvn package vrealize:push -Pcorp-env -Dvrealize.ssl.ignore.certificate\n</code></pre> <p>You can ignore certificate hostname error, i.e. the CN does not match the actual hostname, by adding the flag <code>-Dvrealize.ssl.ignore.certificate</code>:</p> <pre><code>mvn package vrealize:push -Pcorp-env -Dvrealize.ssl.ignore.hostname\n</code></pre> <p>You can also combine the two options above.</p> <p>The other option is to set the flags in your Maven's settings.xml file for a specific development environment.</p> <pre><code>&lt;profile&gt;\n    &lt;id&gt;corp-dev&lt;/id&gt;\n    &lt;properties&gt;\n        &lt;!--vRO Connection--&gt;\n        &lt;vro.host&gt;10.29.26.18&lt;/vro.host&gt;\n        &lt;vro.port&gt;8281&lt;/vro.port&gt;\n        &lt;vro.username&gt;administrator@vsphere.local&lt;/vro.username&gt;\n        &lt;vro.password&gt;***&lt;/vro.password&gt;\n        &lt;vro.auth&gt;vra&lt;/vro.auth&gt;\n        &lt;vro.tenant&gt;vsphere.local&lt;/vro.tenant&gt;\n        &lt;vro.authHost&gt;{auth_host}&lt;/vro.authHost&gt;\n        &lt;vro.authPort&gt;{auth_port}&lt;/vro.authPort&gt; \n        &lt;vro.refresh.token&gt;{refresh_token}&lt;/vro.refresh.token&gt; \n        &lt;vro.proxy&gt;http://proxy.host:80&lt;/vro.proxy&gt;\n        &lt;vrealize.ssl.ignore.hostname&gt;true&lt;/vrealize.ssl.ignore.hostname&gt;\n        &lt;vrealize.ssl.ignore.certificate&gt;true&lt;/vrealize.ssl.ignore.certificate&gt;\n    &lt;/properties&gt;\n&lt;/profile&gt;\n</code></pre>"},{"location":"usage/products/use-workstation-vro-project/#bundling","title":"Bundling","text":"<p>To produce a bundle.zip containing the package and all its dependencies, use:</p> <pre><code>$ mvn clean deploy -Pbundle\n</code></pre> <p>Refer to Build Tools for VMware Aria/Bundling for more information.</p>"},{"location":"usage/products/use-workstation-vro-project/#clean-up","title":"Clean Up","text":"<p>To clean up a version of vRO package from the server use:</p> <ul> <li>Clean up only curent package version from the server   <pre><code>mvn vrealize:clean -DcleanUpLastVersion=true -DcleanUpOldVersions=false -DincludeDependencies=false\n</code></pre></li> <li>Clean up curent package version from the server and its dependencies. This is a force removal operation.   <pre><code>mvn vrealize:clean -DcleanUpLastVersion=true -DcleanUpOldVersions=false -DincludeDependencies=true\n</code></pre></li> <li>Clean up old package versions and the old vertions of package dependencies.   <pre><code>mvn vrealize:clean -DcleanUpLastVersion=false -DcleanUpOldVersions=true -DincludeDependencies=true\n</code></pre></li> </ul>"},{"location":"usage/products/use-workstation-vro-project/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>If Maven error does not contain enough information rerun it with -X debug flag.</li> </ul> <pre><code>mvn -X &lt;rest of the command&gt;\n</code></pre> <ul> <li>Sometimes Maven might cache old artifats. Force fetching new artifacts with -U. Alternativelly remove /.m2/repository folder. <pre><code>mvn -U &lt;rest of the command&gt;\n</code></pre>"},{"location":"usage/products/vra7x/","title":"vRealize Automation 7.x Project","text":""},{"location":"usage/products/vra7x/#about","title":"About","text":"<p>vRA 7 project is a filesystem representation of vRA content into human friendly YAML or JSON format. The project consist of content descriptor and content container.</p> <ul> <li>Content Descriptor defines what vRA content will be part of this project.</li> <li>Content Container holds the actual content representation.</li> </ul>"},{"location":"usage/products/vra7x/#prerequisites","title":"Prerequisites","text":"<p>Before you continue with this section validate that all of the prerequisites are met. - Install and Configure #TO DO: link to workstation setup</p>"},{"location":"usage/products/vra7x/#crate-new-vra-7-project","title":"Crate New vRA 7 Project","text":"<p>Build Tools for VMware Aria provides ready to use vRA 7 project templates using maven archetypes.</p> <p>To create a new vRA 7 project use the following command: <pre><code>args=(\n    \"-DinteractiveMode=false\"\n    \"-DarchetypeGroupId=com.vmware.pscoe.vra.archetypes\"\n    \"-DarchetypeArtifactId=package-vra-archetype\"\n    \"-DarchetypeVersion=2.36.0\"\n    \"-DgroupId=com.company.bu\" # (1)!\n    \"-DartifactId=project.type\" # (2)!\n)\nmvn archetype:generate \"${args[@]}\"\n</code></pre></p> <ol> <li>The groupId in Maven is a distinctive identifier specifically used for a project. It acts as a namespace, ensuring that project names don't clash with each other. It is recommended to choose a groupId that reflects your organization or project.</li> <li>The artifactId is a unique identifier for a specific project or module within a project. It represents the name of the artifact that is generated by the project. It is recommended to choose a artifactId that reflects the project type.</li> </ol> <p>Content Descriptor is implemented by content.yaml file with the following defaults: <pre><code>---\n# Example describing for export Composite blueprints by their names\n#\n# composite-blueprint:\n#   - SQL 2016 Managed\n#   - Kubernates 1.9.0\n\nproperty-group:\nproperty-definition:\nsoftware-component:\ncomposite-blueprint:\nxaas-blueprint:\nxaas-resource-action:\nxaas-resource-type:\nxaas-resource-mapping:\nworkflow-subscription:\n...\n</code></pre></p> <p>Note</p> <p>vRA 7 Project supports only content types outlined into Content Descriptor.</p> <p>To capture the state of your vRA environment simply fill in the names of the content objects and follow the Pull Content section.</p>"},{"location":"usage/products/vra7x/#build-project","title":"Build Project","text":"<p>To build the project, execute the following maven command: <pre><code>mvn clean package\n</code></pre></p> <p>The output of the command will result in com.company.bu.project.type-1.0.0-SNAPSHOT.vra file generated in the target folder of the project.</p>"},{"location":"usage/products/vra7x/#bundle-project","title":"Bundle Project","text":"<p>To produce a bundle.zip containing the package and all its dependencies, use: <pre><code>mvn clean package -Pbundle\n</code></pre></p>"},{"location":"usage/products/vra7x/#environment-connection-parameters","title":"Environment Connection Parameters","text":"<p>There are two ways to pass the vRA connection parameters to maven pull/push command:</p> Use Maven ProfilesDirectly Pass The Parameters <p>Append the following profile section in your maven settings.xml file.</p> <pre><code>...&lt;!--# (1)! --&gt;\n&lt;profiles&gt;\n  ...\n  &lt;profile&gt;\n      &lt;id&gt;target-env&lt;/id&gt;\n      &lt;properties&gt;\n          &lt;vra.host&gt;vra-fqdn&lt;/vra.host&gt;\n          &lt;vra.port&gt;443&lt;/vra.port&gt;\n          &lt;vra.username&gt;configurationadmin@vsphere.local&lt;/vra.username&gt;\n          &lt;vra.password&gt;*****&lt;/vra.password&gt;\n          &lt;vra.tenant&gt;vsphere.local&lt;/vra.tenant&gt;\n      &lt;/properties&gt;\n  &lt;/profile&gt;\n&lt;/profiles&gt;\n</code></pre> <ol> <li>The location of settings.xml for macos is ~/.m2 and C:\\Users\\username\\.m2 for windows</li> </ol> <p>Use the profile by passing it with: <pre><code>mvn vra:pull -Ptarget-env\n</code></pre></p> <pre><code>mvn vra:pull -Dvra.host=vra-fqdn -Dvra.port=443 -Dvra.username=configurationadmin@vsphere.local -Dvra.password=***** -Dvra.tenant=vsphere.local\n</code></pre>"},{"location":"usage/products/vra7x/#pull-content","title":"Pull Content","text":"<p>To pull the content on the target environment execute the following maven command: <pre><code>mvn vra:pull -Ptarget-env\n</code></pre></p> <p>Note</p> <p>Pull command <code>vra:pull</code> will fail if the content.yaml is empty or it cannot find some of the described content on the target vRA server.</p>"},{"location":"usage/products/vra7x/#push-content","title":"Push Content","text":"<p>To push local content to the target environment execute the following maven command: <pre><code>mvn package vrealize:push -Ptarget-env\n</code></pre></p>"},{"location":"usage/products/vra7x/#include-dependencies","title":"Include Dependencies","text":"<p>By default, the <code>vrealize:push</code> goal will deploy all dependencies of the current project to the target environment. You can control that by the <code>-DincludeDependencies</code> flag. The value is <code>true</code> by default, so you skip the dependencies by executing the following: <pre><code>mvn package vrealize:push -Ptarget-env -DincludeDependencies=false\n</code></pre></p> <p>Note</p> <p>Dependencies will not be deployed if the server has a newer version of the same package deployed. For example, if the current project depends on <code>com.vmware.pscoe.example-2.4.0</code> and on the server there is <code>com.vmware.pscoe.example-2.4.2</code>, the package will not be downgraded. You can force that by adding the <code>`-Dvra.importOldVersions</code> flag: <pre><code>mvn package vrealize:push -Ptarget-env -Dvra.importOldVersions\n</code></pre> The command above will forcefully deploy the exact versions of the dependent packages, downgrading anything it finds on the server.</p>"},{"location":"usage/products/vra7x/#ignore-certificates","title":"Ignore Certificates","text":"<p>This section describes how to bypass a security feature in development/testing environment. Do not use those flags when targeting production servers. Instead, make sure the certificates have the correct CN, use FQDN to access the servers and add the certificates to Java's key store (i.e. cacerts).</p> Use Maven ProfilesDirectly Pass The Parameters <p>You can ignore certificate errors the certificate is not trusted and the CN does not match the actual hostname by appending the following parameters to the target profile in your maven settings.xml file:</p> <pre><code>...&lt;!--# (1)! --&gt;\n&lt;profiles&gt;\n  ...\n  &lt;profile&gt;\n      &lt;id&gt;target-env&lt;/id&gt;\n      &lt;properties&gt;\n          ...\n          &lt;vrealize.ssl.ignore.hostname&gt;true&lt;/vrealize.ssl.ignore.hostname&gt;\n          &lt;vrealize.ssl.ignore.certificate&gt;true&lt;/vrealize.ssl.ignore.certificate&gt;            \n      &lt;/properties&gt;\n  &lt;/profile&gt;\n&lt;/profiles&gt;\n</code></pre> <ol> <li>The location of settings.xml for macos is ~/.m2 and C:\\Users\\username\\.m2 for windows</li> </ol> <p>You can ignore certificate error, i.e. the certificate is not trusted, by adding the flag <code>-Dvrealize.ssl.ignore.certificate</code>: <pre><code>mvn package vrealize:push -Ptarget-env -Dvrealize.ssl.ignore.certificate\n</code></pre></p> <p>You can ignore certificate hostname error, i.e. the CN does not match the actual hostname, by adding the flag <code>-Dvrealize.ssl.ignore.certificate</code>: <pre><code>mvn package vrealize:push -Ptarget-env -Dvrealize.ssl.ignore.hostname\n</code></pre></p>"},{"location":"usage/products/vra7x/#clean-up-content","title":"Clean Up Content","text":"<p>To clean up a version of a package from the server use:</p> <ul> <li>Clean up only current package version from the server     <pre><code>mvn vrealize:clean -DcleanUpLastVersion=true -DcleanUpOldVersions=false -DincludeDependencies=false\n</code></pre></li> <li>Clean up current package version from the server and its dependencies. This is a force removal operation.   <pre><code>mvn vrealize:clean -DcleanUpLastVersion=true -DcleanUpOldVersions=false -DincludeDependencies=true\n</code></pre></li> <li>Clean up old package versions and the old version of package dependencies.   <pre><code>mvn vrealize:clean -DcleanUpLastVersion=false -DcleanUpOldVersions=true -DincludeDependencies=true\n</code></pre></li> </ul>"},{"location":"usage/products/vra7x/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>If maven error does not contain enough information re-run it with -X debug flag. <pre><code>mvn -X &lt;rest of the command&gt;\n</code></pre></li> <li>Sometimes maven might cache old artifacts. Force fetching new artifacts with -U. Alternatively remove /.m2/repository folder. <pre><code>mvn -U &lt;rest of the command&gt;\n</code></pre>"},{"location":"usage/products/vra8x/","title":"vRealize Automation 8.x Project","text":""},{"location":"usage/products/vra8x/#about","title":"About","text":"<p>vRA 8 project is a filesystem representation of vRA content into human friendly YAML or JSON format. The project consist of content descriptor and content container.</p> <ul> <li>Content Descriptor defines what vRA content will be part of this project.</li> <li>Content Container holds the actual content representation.</li> </ul>"},{"location":"usage/products/vra8x/#prerequisites","title":"Prerequisites","text":"<p>Before you continue with this section validate that all of the prerequisites are met. - Install and Configure #TO DO: link to workstation setup</p>"},{"location":"usage/products/vra8x/#create-new-vra-8-project","title":"Create New vRA 8 Project","text":"<p>Build Tools for VMware Aria provides ready to use vRA 8 project templates maven archetypes.</p> <p>To create a new vRA 8 project from archetype use the following command: <pre><code>args=(\n    \"-DinteractiveMode=false\"\n    \"-DarchetypeGroupId=com.vmware.pscoe.vra-ng.archetypes\"\n    \"-DarchetypeArtifactId=package-vra-ng-archetype\"\n    \"-DarchetypeVersion=2.36.0\"\n    \"-DgroupId=com.company.bu\" # (1)!\n    \"-DartifactId=project.type\" # (2)!\n)\nmvn archetype:generate \"${args[@]}\"\n</code></pre></p> <ol> <li>The groupId in Maven is a distinctive identifier specifically used for a project. It acts as a namespace, ensuring that project names don't clash with each other. It is recommended to choose a groupId that reflects your organization or project.</li> <li>The artifactId is a unique identifier for a specific project or module within a project. It represents the name of the artifact that is generated by the project. It is recommended to choose a artifactId that reflects the project type.</li> </ol> <p>Content Descriptor is implemented by content.yaml file with the following defaults:</p> <pre><code>---\nblueprint:\nsubscription:\nflavor-mapping:\n  - small\n  - medium\nimage-mapping: []\nstorage-profile: []\nregion-mapping:\n  cloud-account-tags:\n    export-tag: \"env:dev\"\n    import-tags: [\"env:dev\", \"env:test\"]\ncatalog-item:\ncustom-resource:\nresource-action:\ncatalog-entitlement:\ncontent-source:\nproperty-group:\npolicy:\n  content-sharing:\n</code></pre> <p>Note</p> <p>vRA 8 Project supports only content types outlined into Content Descriptor.</p> <p>To capture the state of your vRA environment simply fill in the names of the content objects and follow the Pull Content section.</p> Method Description blueprints Empty array [] - nothing is exported List of items - the given items are exported. <code>PUT</code> :material-check-all: Update resource <code>DELETE</code> :material-close:     Delete resource"},{"location":"usage/products/vra8x/#export-rules-for-content-types","title":"Export Rules for Content Types","text":"<p>Use the following formats for  Empty array [] - nothing is exported List of items - the given items are exported. Null (nothing given) - everything is being exported * blueprints * catalog-item * content-source * custom-resource * catalog-entitlement * property-group * subscription</p>"},{"location":"usage/products/vra8x/#exporting-regional-content","title":"Exporting regional content","text":"<p>To export regional content, cloud account(s) with given tag(s) should be given. Empty array [] - nothing is exported  List of items - the given items are exported in all regions linked to cloud accounts with given tag  Null (nothing given) - everything is being exported in all regions linked to cloud accounts with given tag  * flavor-mapping * image-mapping * storage-profile</p>"},{"location":"usage/products/vra8x/#export-all-content-in-all-regions-linked-to-cloud-accounts-with-given-tag","title":"Export all content in all regions linked to cloud accounts with given tag","text":"<p>To export all content in all regions linked to cloud accounts, the tag for export should be defined. If not defined, nothing will be exported.</p>"},{"location":"usage/products/vra8x/#regional-content","title":"Regional Content","text":"<p>The vRA 8 philosophy is built around the concept of infrastructure definition capable of resource provisioning -  compute, network, storage and other types of resources - that builds up an abstract model for resource description. This allows workload placement to happen dynamically based on various explicit or implicit rules. Part of this abstract model is the definition of various mappings and profiles that provide common higher-level definitions of underlying  infrastructure objects. These definitions take the form of various mappings and profiles: * flavor mappings - common designation of compute resource t-shirt or other sizing * image mappings - common designation of VM images * storage profiles - a set of storage policies and configurations used for workload placement * network profiles - a set of network-related configurations used for network resource placement</p> <p>These abstractions are related to the regions within the cloud accounts and their capabilities. They utilize the various underlying resources which are automatically collected and organized into \"fabrics\" by vRA. As such, they contain information about resources in the various connected regions and for the purpose of this project are collectively called  regional content.</p> <p>Exporting (pulling) and importing (pushing) of regional content is achieved using a mapping definition specified in the content manifest (content.yaml): <code>region-mappping</code>. It contains a set of mapping criteria used for exporting and importing of content. The vRA-NG package manager handles the <code>export-tag</code> and <code>import-tags</code> entries of the <code>cloud-account-tags</code> section of <code>region-mapping</code>.</p>"},{"location":"usage/products/vra8x/#export-regional-content","title":"Export Regional Content","text":"<p>When exporting regional content defined in the respective content categories - <code>image-mapping</code>, <code>flavor-mapping</code>,  <code>storage-profile</code>, etc., the vRA-NG package manager takes into account the tag that is defined in the <code>export-tag</code> entry and exports content that is related to a cloud account(s) containing this tag. The content is stored in a directory within a unique regional directory bearing the name of the cloud account and the cloud zone id. The cloud account and zone combination are persisted for reference to the originating environment. </p>"},{"location":"usage/products/vra8x/#import-regional-content","title":"Import Regional Content","text":"<p>The vRA-NG package manager uses the <code>import-tags</code> entry from the content manifest (content.yaml) to (re)create regional content targeting cloud accounts that contain one or more of the import tags. The content is taken from all of the regional folders and regardless of its origin, it is imported to the target environment based on the <code>import-tags</code>, i.e.  related to cloud accounts possessing one or more of the import tags list.</p> <p>Note</p> <p>Unreleased blueprints that have custom form will be automatically released with version 1.</p> <p>To capture the state of your vRA NG environment simply fill in the names of the content objects you would like to capture and look at the Pull section of this document.</p> <p>To import / export custom forms and/or icons you have to specify the associated catalog-item name in <code>catalog-item</code> tag. The naming convention for this is SOURCE_NAME__CATALOG_ITEM_NAME The integration end point data for each workflow that is associated with the content source will be updated as well with the one fetched from the VRA server. </p>"},{"location":"usage/products/vra8x/#build-project","title":"Build Project","text":"<p>To build the project, execute the following maven command: <pre><code>mvn clean package\n</code></pre></p> <p>The output of the command will result in com.company.bu.project.type-1.0.0-SNAPSHOT.vra-ng file generated in the target folder of the project.</p>"},{"location":"usage/products/vra8x/#bundle-project","title":"Bundle Project","text":"<p>To produce a bundle.zip containing the package and all its dependencies, use: <pre><code>mvn clean package -Pbundle\n</code></pre></p>"},{"location":"usage/products/vra8x/#environment-connection-parameters","title":"Environment Connection Parameters","text":"<p>There are few ways to pass the vRA connection parameters to maven pull/push command:</p> Use Maven ProfilesDirectly Pass vRA Cloud Token Parameters <p>For vRA 8 basic authentication append the following profile section in your maven settings.xml file.</p> <pre><code>...&lt;!--# (1)! --&gt;\n&lt;profiles&gt;\n  ...\n  &lt;profile&gt;\n      &lt;id&gt;target-env&lt;/id&gt;\n      &lt;properties&gt;\n          &lt;vrang.host&gt;vra-fqdn&lt;/vrang.host&gt;\n          &lt;vrang.port&gt;443&lt;/vrang.port&gt;\n          &lt;vrang.username&gt;configurationadmin&lt;/vrang.username&gt;\n          &lt;vrang.password&gt;*****&lt;/vrang.password&gt;\n          &lt;vrang.project.id&gt;{project_id}&lt;/vrang.project.id&gt;\n          &lt;vrang.org.id&gt;{org_id}&lt;/vrang.org.id&gt;\n          &lt;vrang.bp.release&gt;true&lt;/vrang.bp.release&gt;\n          &lt;vrang.vro.integration&gt;{vro_integration_name}&lt;/vrang.vro.integration&gt;\n          &lt;vrang.bp.ignore.versions&gt;true|false&lt;/bp.ignore.versions&gt;\n          &lt;vrang.data.collection.delay.seconds&gt;{optional_vro_data_collection_delay_seconds}&lt;/vrang.data.collection.delay.seconds&gt;\n      &lt;/properties&gt;\n  &lt;/profile&gt;\n&lt;/profiles&gt;\n</code></pre> <ol> <li>The location of settings.xml for macos is ~/.m2 and C:\\Users\\username\\.m2 for windows</li> </ol> <p>For vRA Cloud token authentication append the following profile section in your maven settings.xml file.</p> <pre><code>...&lt;!--# (1)! --&gt;\n&lt;profiles&gt;\n  ...\n  &lt;profile&gt;\n      &lt;id&gt;target-env&lt;/id&gt;\n      &lt;properties&gt;\n          &lt;vrang.host&gt;api.mgmt.cloud.vmware.com&lt;/vrang.host&gt;\n          &lt;vrang.csp.host&gt;console.cloud.vmware.com&lt;/vrang.csp.host&gt;\n          &lt;vrang.proxy&gt;http://proxy.host:80&lt;/vrang.proxy&gt;\n          &lt;vrang.port&gt;443&lt;/vrang.port&gt;\n          &lt;vrang.project.id&gt;{project_id}&lt;/vrang.project.id&gt;\n          &lt;vrang.org.id&gt;{org_id}&lt;/vrang.org.id&gt;\n          &lt;vrang.refresh.token&gt;{refresh_token}&lt;/vrang.refresh.token&gt;\n          &lt;vrang.bp.release&gt;true&lt;/vrang.bp.release&gt;\n          &lt;vrang.vro.integration&gt;{vro_integration_name}&lt;/vrang.vro.integration&gt;\n          &lt;vrang.bp.ignore.versions&gt;true|false&lt;/bp.ignore.versions&gt;\n      &lt;/properties&gt;\n  &lt;/profile&gt;\n&lt;/profiles&gt;\n</code></pre> <ol> <li>The location of settings.xml for macos is ~/.m2 and C:\\Users\\username\\.m2 for windows</li> </ol> <p>For vRA 8 token authentication append the following profile section in your maven settings.xml file.</p> <pre><code>...&lt;!--# (1)! --&gt;\n&lt;profiles&gt;\n  ...\n  &lt;profile&gt;\n      &lt;id&gt;target-env&lt;/id&gt;\n      &lt;properties&gt;\n          &lt;vrang.host&gt;vra-fqdn&lt;/vrang.host&gt;\n          &lt;vrang.port&gt;443&lt;/vrang.port&gt;\n          &lt;vrang.project.id&gt;{project_id}&lt;/vrang.project.id&gt;\n          &lt;vrang.org.id&gt;{org_id}&lt;/vrang.org.id&gt;\n          &lt;vrang.refresh.token&gt;{refresh_token}&lt;/vrang.refresh.token&gt;\n          &lt;vrang.bp.release&gt;true&lt;/vrang.bp.release&gt;\n          &lt;vrang.vro.integration&gt;{vro_integration_name}&lt;/vrang.vro.integration&gt;\n          &lt;vrang.bp.ignore.versions&gt;true|false&lt;/bp.ignore.versions&gt;\n      &lt;/properties&gt;\n  &lt;/profile&gt;\n&lt;/profiles&gt;\n</code></pre> <ol> <li>The location of settings.xml for macos is ~/.m2 and C:\\Users\\username\\.m2 for windows</li> </ol> <p>Use the profile by passing it with: <pre><code>mvn vra:pull -Ptarget-env\n</code></pre></p> <pre><code>mvn vra-ng:pull -Dvrang.host=api.mgmt.cloud.vmware.com -Dvrang.csp.host=console.cloud.vmware.com -Dvra.port=443 -Dvrang.project.id={project_id} -Dvrang.refresh.token={refresh_token}\n</code></pre>"},{"location":"usage/products/vra8x/#pull-content","title":"Pull Content","text":"<p>To pull the content on the target environment execute the following maven command: <pre><code>mvn vra-ng:pull -Ptarget-env\n</code></pre></p> <p>Note</p> <p>Pull command <code>vra-ng:pull</code> will fail if the content.yaml is empty or it cannot find some of the described content on the target vRA server.</p> <p>Note</p> <p>As seen by the examples, you can specify project name or project id in the settings.xml or as command line parameters. At least one of those parameters must be present in the configuration. If you define both, project id takes precedence over project name. If you define only project name, the solution will search for a project with that name and use it for the content operations.</p> <p>Note</p> <p>When pushing property groups, the project ID specified in the configuration will be used to update the payload sent while creating/updating them in vRA.</p> <p>Note</p> <p>Check the Authentication section of this document for details on possible authentication methods.</p> <p>Note</p> <p>If a catalog item has a custom form and/or an icon they will be exported in subdirs of the catalog-items directory</p> <p>Note</p> <p>If no catalog entitlements are specified, all of the available entitlements will be exported.</p> <p>Note</p> <p>If catalog entitlement has a projectId in its configuration it will override the one specified in settings.xml during push of the entitlement on the target system.</p> <p>Note</p> <p>In the catalog entitlement yaml file you can specify also project name using the projectName tag instead of projectId.</p> <p>Note</p> <p>The value of the  tag will take precedence over the value of the  tag in case both are present (either trough settings.xml or Installer) during filtering of the cloud accounts during pull action. <p>Note</p> <p>The value of the  is used to change the integration endpoint of Workflow Content Sources and other resources that point to that type of integration. If the property is missing a default name \"embedded-VRO\" will be used."},{"location":"usage/products/vra8x/#additional-parameters","title":"Additional Parameters","text":"<ul> <li><code>bp.ignore.versions</code> - ignores blueprint versioning  (refer to the Blueprint Versioning section below). This option defaults to <code>false</code>. When dealing with blueprint development, you might want to set this to <code>true</code> in order to avoid unnecessary blueprint versions.</li> </ul>"},{"location":"usage/products/vra8x/#push-content","title":"Push Content","text":"<p>To push local content to the target environment execute the following maven command: <pre><code>mvn package vrealize:push -Ptarget-env\n</code></pre></p>"},{"location":"usage/products/vra8x/#include-dependencies","title":"Include Dependencies","text":"<p>By default, the <code>vrealize:push</code> goal will deploy all dependencies of the current project to the target environment. You can control that by the <code>-DincludeDependencies</code> flag. The value is <code>true</code> by default, so you skip the dependencies by executing the following: <pre><code>mvn package vrealize:push -Ptarget-env -DincludeDependencies=false\n</code></pre></p> <p>Note</p> <p>Dependencies will not be deployed if the server has a newer version of the same package deployed. For example, if the current project depends on <code>com.vmware.pscoe.example-2.4.0</code> and on the server there is <code>com.vmware.pscoe.example-2.4.2</code>, the package will not be downgraded. You can force that by adding the <code>`-Dvra.importOldVersions</code> flag: <pre><code>mvn package vrealize:push -Ptarget-env -Dvra.importOldVersions\n</code></pre> The command above will forcefully deploy the exact versions of the dependent packages, downgrading anything it finds on the server.</p>"},{"location":"usage/products/vra8x/#ignore-certificates","title":"Ignore Certificates","text":"<p>This section describes how to bypass a security feature in development/testing environment. Do not use those flags when targeting production servers. Instead, make sure the certificates have the correct CN, use FQDN to access the servers and add the certificates to Java's key store (i.e. cacerts).</p> Use Maven ProfilesDirectly Pass The Parameters <p>You can ignore certificate errors the certificate is not trusted and the CN does not match the actual hostname by appending the following parameters to the target profile in your maven settings.xml file:</p> <pre><code>...&lt;!--# (1)! --&gt;\n&lt;profiles&gt;\n  ...\n  &lt;profile&gt;\n      &lt;id&gt;target-env&lt;/id&gt;\n      &lt;properties&gt;\n          ...\n          &lt;vrealize.ssl.ignore.hostname&gt;true&lt;/vrealize.ssl.ignore.hostname&gt;\n          &lt;vrealize.ssl.ignore.certificate&gt;true&lt;/vrealize.ssl.ignore.certificate&gt;            \n      &lt;/properties&gt;\n  &lt;/profile&gt;\n&lt;/profiles&gt;\n</code></pre> <ol> <li>The location of settings.xml for macos is ~/.m2 and C:\\Users\\username\\.m2 for windows</li> </ol> <p>You can ignore certificate error, i.e. the certificate is not trusted, by adding the flag <code>-Dvrealize.ssl.ignore.certificate</code>: <pre><code>mvn package vrealize:push -Ptarget-env -Dvrealize.ssl.ignore.certificate\n</code></pre></p> <p>You can ignore certificate hostname error, i.e. the CN does not match the actual hostname, by adding the flag <code>-Dvrealize.ssl.ignore.certificate</code>: <pre><code>mvn package vrealize:push -Ptarget-env -Dvrealize.ssl.ignore.hostname\n</code></pre></p>"},{"location":"usage/products/vra8x/#additional-parameters_1","title":"Additional Parameters","text":"<ul> <li> <p><code>vrang.bp.release</code> - create a new version for already released blueprint (refer to the Blueprint Versioning section  below). This option defaults to <code>true</code>. When dealing with blueprint development, you might want to set this to <code>false</code> in order to avoid unnecessary blueprint versions.</p> </li> <li> <p><code>vrang.data.collection.delay.seconds</code> - Delay in seconds to wait for vRA data collection to pass before importing data. Can also be passed as an interactive parameter <code>-Dvrang.data.collection.delay.seconds=600</code>. useful when Dynamic types and custom resources are used in the projects and vRO content is imported, however vRA needs to then retrieve it in order to be able to create the custom Resource and use the Create/Delete Workflows. This only happens after a short delay and the vRA data collector scrapes vRO. Defaults to no delay.</p> </li> </ul> <p>Note</p> <p>If there are any custom forms or icons associated with a catalog-item they will also be imported. </p> <p>Note</p> <p>If there are custom forms in the custom-forms directory that are associated with workflows, they will be imported to the VRA server as well.</p> <p>Note</p> <p>If there are custom forms in the custom-forms directory that are associated with workflows, the content-sources that are associated with them will be imported as well (they will be read from the content-sources directory).</p>"},{"location":"usage/products/vra8x/#blueprint-versioning","title":"Blueprint versioning","text":"<p>When pushing a blueprint to a vRA server that contains previously released blueprint with the same name as the one being pushed, a new version will be created and released in order to maintain the intended state.  A new version will  not be created if the content of the blueprint has not been modified since the latest released  version in order to avoid unnecessary versioning.</p> <p>If there's a custom form associated with the blueprint being imported and there's no previously released version,  an initial blueprint version (1) will be created and released in order to import the custom form.</p> <p>When creating a new version in the above-described cases, the new version will be auto-generated based on the latest version of the blueprint. The following version formats are supported with their respective incrementing rules:</p> Latest version New version Incrementing rules 1 2 Increment major version 1.0 1.1 Major and minor version - increment the minor 1.0.0 1.0.1 Major, minor and patch version - incrementing the patch 1.0.0-alpha 2020-05-27-10-10-43 Arbitrary version - generate a new date-time based version"},{"location":"usage/products/vra8x/#release","title":"Release","text":"<p>To release a specific content uploaded on a live server, you can use the <code>vrealize:release</code> command:</p> <pre><code>mvn clean package vrealize:release -Pcorp-env -Dvrang.contentType=blueprint -Dvrang.contentNames=testBlueprint -Dvrang.version=1 -DreleaseIfNotUpdated=false\n</code></pre> <p>Only parameter vrang.version is required.  Defalut behavior for other parameters:     - vrang.contentType: default value \"all\". Releases all supported content types.     - vrang.contentNames: default value \"[]\". Releases all content of given types on server.     - vrang.releaseIfNotUpdated: default value \"false\". Skips content if there are no updates since latest version.</p> <p>Note</p> <p>Nothing will be released if any of the content already has the given version existing.</p>"},{"location":"usage/products/vra8x/#clean-up-content","title":"Clean Up Content","text":"<p>To clean up a version of a package from the server use:</p> <ul> <li>Clean up only current package version from the server     <pre><code>mvn vrealize:clean -DcleanUpLastVersion=true -DcleanUpOldVersions=false -DincludeDependencies=false\n</code></pre></li> <li>Clean up current package version from the server and its dependencies. This is a force removal operation.   <pre><code>mvn vrealize:clean -DcleanUpLastVersion=true -DcleanUpOldVersions=false -DincludeDependencies=true\n</code></pre></li> <li>Clean up old package versions and the old version of package dependencies.   <pre><code>mvn vrealize:clean -DcleanUpLastVersion=false -DcleanUpOldVersions=true -DincludeDependencies=true\n</code></pre></li> </ul>"},{"location":"usage/products/vra8x/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>If maven error does not contain enough information re-run it with -X debug flag. <pre><code>mvn -X &lt;rest of the command&gt;\n</code></pre></li> <li>Sometimes maven might cache old artifacts. Force fetching new artifacts with -U. Alternatively remove /.m2/repository folder. <pre><code>mvn -U &lt;rest of the command&gt;\n</code></pre>"},{"location":"usage/products/vra8x/#known-issues","title":"Known issues:","text":"<ul> <li>There is an issue with svg icons, they will not be downloaded/uploaded (IAC-482).</li> </ul>"},{"location":"usage/products/vrops/","title":"Aria Operations Projects","text":""},{"location":"usage/products/vrops/#about","title":"About","text":"<p>Aria Operations Project is a filesystem representation of vROps content into human friendly YAML and/or JSON format. The project consist of content descriptor and content container.</p> <ul> <li>Content Descriptor defines what part vROps content will be part of this project. The descriptor is a content.yaml file in the root directory of a project</li> <li>Content Container holds the actual content representation. Each individual content object is represented in a JSON format in a separate file. Before you continue with this section validate that all of the prerequisites are met.</li> </ul>"},{"location":"usage/products/vrops/#prerequisites","title":"Prerequisites","text":"<p>Before you continue with this section validate that all of the prerequisites are met. - Install and Configure #TO DO: link to workstation setup</p>"},{"location":"usage/products/vrops/#crate-new-vrops-project","title":"Crate New vROps Project","text":"<p>Build Tools for VMware Aria provides ready to use project templates (maven archetypes).</p> <p>To create a new vROps project from archetype use the following command: <pre><code>mvn archetype:generate \\\n    -DinteractiveMode=false \\\n    -DarchetypeGroupId=com.vmware.pscoe.vrops.archetypes \\\n    -DarchetypeArtifactId=package-vrops-archetype \\\n    -DarchetypeVersion=&lt;iac_for_vrealize_version&gt; \\\n    -DgroupId=local.corp.it.cloud \\\n    -DartifactId=catalog\n</code></pre></p> <p>The result of this command will produce the following project file structure: <pre><code>vrops\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 content.yaml\n\u251c\u2500\u2500 pom.xml\n\u251c\u2500\u2500 release.sh\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 main\n        \u2514\u2500\u2500 dashboards\n            \u2514\u2500\u2500 dashboard.yaml\n        \u2514\u2500\u2500 views\n            \u2514\u2500\u2500 resources\n            \u2514\u2500\u2500 source.json\n        \u2514\u2500\u2500 alertdefinitions\n            \u2514\u2500\u2500 alert_definition.json\n        \u2514\u2500\u2500 symptomdefinitions\n            \u2514\u2500\u2500 symptom_definition.json\n        \u2514\u2500\u2500 policies\n            \u2514\u2500\u2500 policy.xml\n            \u2514\u2500\u2500 policy.group\n        \u2514\u2500\u2500 supermetrics\n            \u2514\u2500\u2500 supermetric.json\n        \u2514\u2500\u2500 recommendations\n            \u2514\u2500\u2500 recommendation.json\n        \u2514\u2500\u2500 metricconfigs\n            \u2514\u2500\u2500 metricconfig.xml\n        \u2514\u2500\u2500 customer-groups\n            \u2514\u2500\u2500 custom-group.json\n        \u2514\u2500\u2500 reports\n          \u2514\u2500\u2500 reportDir\n            \u2514\u2500\u2500 resources\n            \u2514\u2500\u2500 content.xml\n</code></pre></p> <p>Content Descriptor is implemented by content.yaml file with the following defaults.</p> <p>Note: <code>generated_dir_name</code> in the above directory structure is auto generated on the fly.</p> <p>Note: vROps Project supports only content types outlined into content descriptor. <pre><code>---\n# Example describes export of: \n#   Dashboard with name \"dashboard01\"\n#   Custom form for \"blueprint\" with name \"blueprint\"\n#   Subscription with name \"subscription\"\n#   Flavor mappings with names \"small\" and \"medium\" in all regions linked to cloud accounts with tag \"env:dev\"\n# \n# Example describes import of:\n#   All blueprints in src/blueprints with their custom forms in src/custom-forms\n#   All subscriptions in src/blueprints\n#   All flavor mappings in regions/ into regions linked to cloud accounts with tags \"env:dev\" or \"env:test\"\n\ndashboard:\n  - \"dashboard01\"\nview:\n  - \"view01\"\n  - \"examples*\"\n  - \"*others\"\n  - \"sample*defs*\"\nalert-definition:\n  - \"definition01\"\n  - \"definition02\"\n  - \"exampes*\"\n  - \"*others\"\n  - \"*samp*defs*\"\nsymptom-definition:\n  - \"symptom01\"\n  - \"symptoms*\"\n  - \"*other\"\n  - \"symptoms*defs*\"\npolicy\n  - \"policy01\"\n  - \"policy02\"\n  - \"example*policies\"\n  - \"*example\"\n  - \"other*\"\nsuper-metric\n  - \"supermetric01\"\n  - \"example*supermetrics*\"\n  - \"supemetrics*\"\n  - \"*others\"\nrecommendation\n  - \"recommendation01\"\n  - \"example*recommendations*\"\n  - \"*sample\"\n  - \"similar*\"\nmetric-config:\n  - \"metricconfig01\"\nreport\n  - \"report01\"\n  - \"custom_reports*\"\n  - \"*reports\"\n...%\n</code></pre></p> <p>To capture the state of your vROps environment simply fill in the names of the content objects you would like to capture and look at the Pull section of this document.</p> <p>Note: Due to limitation of the vROPs CLI the import / export of report definitions is not currently supported.</p> <p>Note: The import(push) of the symptoms definitions defined for all the adapter types is not currently supported.</p>"},{"location":"usage/products/vrops/#wildcard-support","title":"Wildcard Support","text":"<p>There is a wildcard support in most of the asset types. This means that you can specify a wildcard (*) symbol in the asset names defined in the content.yaml file (see exmple above), thus exporting all assets matching the wildcard expression.</p> <p>Note: Due to limitation of vROPs REST API wildcard is currently NOT supported for the dashboard and metric-config asset types  Note: If you specify a wildcard in the asset name defined in the content.yaml file, it needs to be enclosed with quotes (\"). Note: *You can also enclose the asset name with quotes (\") in the content.yaml file, even if you specify it with its full name.</p>"},{"location":"usage/products/vrops/#building","title":"Building","text":"<p>You can build any vROps project from sources using Maven: <pre><code>mvn clean package\n</code></pre></p> <p>This will produce a vROps bundle with the groupId, artifactId and version specified in the pom. For example: <pre><code>&lt;project&gt;\n    &lt;groupId&gt;local.corp.it.cloud&lt;/groupId&gt;\n    &lt;artifactId&gt;vrops&lt;/artifactId&gt;\n    &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;\n    &lt;packaging&gt;vrops&lt;/packaging&gt;\n&lt;/project&gt;\n</code></pre> will result in local.corp.it.cloud.vrops-1.0.0-SNAPSHOT.vrops generated in the target folder of your project.</p>"},{"location":"usage/products/vrops/#pull","title":"Pull","text":"<p>When working on a vROps project, you mainly make changes on a live server using the vROps UI and then you need to capture those changes in the maven project on your filesystem.</p> <p>To support this use case, the toolchain comes with a custom goal \"vrops:pull\". The following command will \"pull\" the content outlined into Content Descriptor file to the current project from a specified server and expand its content in the local filesystem overriding any local content: <pre><code>vrops:pull -Dvrops.host=vrops-l-01a.corp.local -Dvrops.port=22 -Dvrops.httpPort=443 -Dvrops.username=root -Dvrops.password=VMware1! -Dvrops.restUser=admin  -Dvrops.restPassword=VMware1!  -Dvrops.dashboardUser=admin  \n</code></pre> A better approach is to have the different vROps development environments specified as profiles in the local settings.xml file by adding the following snippet under \"profiles\": <pre><code>&lt;profile&gt;\n    &lt;id&gt;corp-dev&lt;/id&gt;\n    &lt;properties&gt;\n        &lt;!--vROps Connection--&gt;\n        &lt;vrops.host&gt;192.168.75.1&lt;/vrops.host&gt;\n        &lt;vrops.port&gt;22&lt;/vrops.port&gt;\n        &lt;vrops.httpPort&gt;443&lt;/vrops.httpPort&gt;\n        &lt;vrops.username&gt;root&lt;/vrops.username&gt;\n        &lt;vrops.password&gt;VMware1!&lt;/vrops.password&gt;\n        &lt;vrops.restUser&gt;admin&lt;/vrops.restUser&gt;\n        &lt;vrops.restPassword&gt;VMware1!&lt;/vrops.restPassword&gt;\n        &lt;vrops.dashboardUser&gt;admin&lt;/vrops.dashboardUser&gt;\n        &lt;vrealize.ssl.ignore.hostname&gt;true&lt;/vrealize.ssl.ignore.hostname&gt;\n        &lt;vrealize.ssl.ignore.certificate&gt;true&lt;/vrealize.ssl.ignore.certificate&gt;\n    &lt;/properties&gt;\n&lt;/profile&gt;\n</code></pre> Then, you can sync content back to your local sources by simply activating the profile: <pre><code>mvn vrops:pull -Pcorp-env\n</code></pre></p> <p>Note that <code>vrops:pull</code> will fail if the content.yaml is empty or it cannot find some of the described content  on the target vROps server.</p>"},{"location":"usage/products/vrops/#push","title":"Push","text":"<p>To deploy the code developed in the local project or checked out from source control to a live server, you can use the <code>vrops:push</code> command: <pre><code>mvn package vrops:push -Pcorp-env\n</code></pre> This will build the package and deploy it to the environment described in the <code>corp-env</code> profile. There are a few additional options.</p>"},{"location":"usage/products/vrops/#authentication","title":"Authentication","text":"<p>OAUTH and Basic authentication are supported since version 2.8.0, for older version only basic authentication is supported.</p>"},{"location":"usage/products/vrops/#ignore-certificate-errors-not-recommended","title":"Ignore Certificate Errors (Not recommended)","text":"<p>This section describes how to bypass a security feature in development/testing environment. Do not use those flags when targeting production servers. Instead, make sure the certificates have the correct CN, use FQDN to access the servers and add the certificates to Java's key store (i.e. cacerts).</p> <p>You can ignore certificate errors, i.e. the certificate is not trusted, by adding the flag <code>-Dvrealize.ssl.ignore.certificate</code>: <pre><code>mvn package vrops:push -Pcorp-env -Dvrealize.ssl.ignore.certificate\n</code></pre></p> <p>You can ignore certificate hostname error, i.e. the CN does not match the actual hostname, by adding the flag <code>-Dvrealize.ssl.ignore.certificate</code>: <pre><code>mvn package vrops:push -Pcorp-env -Dvrealize.ssl.ignore.hostname\n</code></pre></p> <p>You can also combine the two options above.</p> <p>The other option is to set the flags in your Maven's settings.xml file for a specific development environment. <pre><code>&lt;profile&gt;\n    &lt;id&gt;corp-dev&lt;/id&gt;\n    &lt;properties&gt;\n        &lt;!--vROps Connection--&gt;\n        &lt;vrops.host&gt;192.168.75.1&lt;/vrops.host&gt;\n        &lt;vrops.port&gt;22&lt;/vrops.port&gt;\n        &lt;vrops.httpPort&gt;443&lt;/vrops.httpPort&gt;\n        &lt;vrops.username&gt;root&lt;/vrops.username&gt;\n        &lt;vrops.password&gt;VMware1!&lt;/vrops.password&gt;\n        &lt;vrops.restUser&gt;admin&lt;/vrops.restUser&gt;\n        &lt;vrops.restPassword&gt;VMware1!&lt;/vrops.restPassword&gt;\n        &lt;vrops.dashboardUser&gt;admin&lt;/vrops.dashboardUser&gt;\n        &lt;vrealize.ssl.ignore.hostname&gt;true&lt;/vrealize.ssl.ignore.hostname&gt;\n        &lt;vrealize.ssl.ignore.certificate&gt;true&lt;/vrealize.ssl.ignore.certificate&gt;\n    &lt;/properties&gt;\n&lt;/profile&gt;\n</code></pre></p>"},{"location":"usage/products/vrops/#clean-up","title":"Clean Up","text":"<p>Clean up is currently not supported</p>"},{"location":"usage/products/vrops/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>If Maven error does not contain enough information rerun it with -X debug flag. <pre><code>mvn -X &lt;rest of the command&gt;\n</code></pre></li> <li>Sometimes Maven might cache old artifacts. Force fetching new artifacts with -U. Alternatively remove /.m2/repository folder. <pre><code>mvn -U &lt;rest of the command&gt;\n</code></pre>"}]}